This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-30T01:22:14.524Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
package.json
postcss.config.js
public/index.html
public/manifest.json
public/robots.txt
README.md
src/App.css
src/App.test.tsx
src/App.tsx
src/components/Layout/Layout.tsx
src/components/Lighthouse/Lighthouse.css
src/components/Lighthouse/Lighthouse.tsx
src/components/Lighthouse/Stars.tsx
src/components/Moon/Moon.css
src/components/Moon/Moon.tsx
src/components/Navigation/NavigationMenu.tsx
src/components/NowPlaying/NowPlaying.tsx
src/components/Water/Water.css
src/components/Water/Water.tsx
src/config/mods.ts
src/config/photos.ts
src/hooks/useReadme.ts
src/index.css
src/index.tsx
src/logo.svg
src/pages/BiznesCard.tsx
src/pages/Home.tsx
src/pages/ModPage.tsx
src/pages/PhotosPage.tsx
src/pages/TransitDatabase.tsx
src/react-app-env.d.ts
src/reportWebVitals.ts
src/setupTests.ts
tailwind.config.js
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: package.json
================
{
  "name": "my-website",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@heroicons/react": "^2.2.0",
    "@tailwindcss/typography": "^0.5.10",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "@types/node": "^16.18.120",
    "framer-motion": "^11.11.17",
    "lightgallery": "^2.8.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-markdown": "^8.0.7",
    "react-router-dom": "^7.0.1",
    "react-scripts": "5.0.1",
    "typescript": "^4.9.5",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.15"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

================
File: src/App.css
================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

================
File: src/App.test.tsx
================
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: src/App.tsx
================
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import { Layout } from './components/Layout/Layout';
import { Home } from './pages/Home';
import { ModPage } from './pages/ModPage';
import { TransitDatabase } from './pages/TransitDatabase';
import { BiznesCard } from './pages/BiznesCard';
import { PhotosPage } from './pages/PhotosPage';

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Layout />}>
          <Route index element={<Home />} />
          <Route path="/minecraft-mods/:modId" element={<ModPage />} />
          <Route path="/transit-database" element={<TransitDatabase />} />
          <Route path="/biznes-card" element={<BiznesCard />} />
          <Route path="/photos/:galleryId" element={<PhotosPage />} />
        </Route>
      </Routes>
    </BrowserRouter>
  );
}

export default App;

================
File: src/components/Layout/Layout.tsx
================
import { NavigationMenu } from '../Navigation/NavigationMenu';
import Stars from '../Lighthouse/Stars';
import { Outlet, useLocation } from 'react-router-dom';
import { Lighthouse } from '../Lighthouse/Lighthouse';
import { Moon } from '../Moon/Moon';
import { NowPlaying } from '../NowPlaying/NowPlaying';

export const Layout = () => {
  const location = useLocation();
  const isPhotosPage = location.pathname.includes('/photos');
  
  return (
    <div className="relative min-h-screen bg-[#1A1A1A] overflow-hidden">
      <div className="fixed inset-0 z-0">
        <Stars />
      </div>
      
      <div className="fixed top-0 right-[15%] z-10">
        <Moon />
      </div>
      
      {!isPhotosPage && (
        <div className="fixed bottom-0 right-0 z-10">
          <Lighthouse />
        </div>
      )}
      
      <main className="relative z-20">
        <Outlet />
      </main>

      <div className="fixed bottom-0 left-0 z-30">
        <NowPlaying />
      </div>

      <div className="fixed top-1/2 -translate-y-1/2 left-[8%] z-50">
        <NavigationMenu />
      </div>
    </div>
  );
};

================
File: src/components/Lighthouse/Lighthouse.css
================
.lighthouse-scene {
  position: fixed;
  bottom: -78px;
  right: 0;
  height: 800px;
  width: 800px;
  pointer-events: none;
}

.lighthouse {
  position: absolute;
  bottom: 80px;
  right: 0;
  color: #ffffff;
  font-size: 10px;
  white-space: pre;
  text-align: center;
  line-height: 1;
}

.light-beam {
  position: absolute;
  top: 70px;
  left: 53%;
  width: 150px;
  height: 15px;
  background: linear-gradient(90deg, rgba(255, 255, 255, 0.8), transparent);
  transform-origin: left;
  animation: rotate 4s linear infinite;
  transform: perspective(500px) rotateY(0deg);
  margin-left: -3px;
}

@keyframes rotate {
  from {
    transform: perspective(500px) rotateY(0deg);
  }
  to {
    transform: perspective(500px) rotateY(360deg);
  }
}

================
File: src/components/Lighthouse/Lighthouse.tsx
================
import './Lighthouse.css';

export const Lighthouse = () => {
  return (
    <div className="lighthouse-scene">
      <div className="lighthouse">
        <pre>{`                                                                                                  
                                                   @@                                               
                                                .*=+=**.                                            
                                              :**#%%%%#@%-                                          
                                             @@@@@@@@@@@@@@                                         
                                            .% +  -  :. = -                                         
                                             % =  =  :. = :                                         
                                             % =  =  :. - :                                         
                                           . # -  -  .. : .                                         
                                           -@@@@@@@%%@@@@@@@                                        
                                        @   . ......+.....:   @                                     
                                        @@  - .... .=......  @@                                     
                                        *@: @-::.::.*.::::* -@*:                                    
                                        -@@:#.:.-:::+ ::::* @@=:                                    
                                        =@@@@@@@%%%@%%%%@@@@@@@=                                    
                                          -=+-=--:.-.::..:---+                                      
                                          :+*++=---=:=+==++**.                                      
                                           ..:..=... ::::-::-                                       
                                          - . .....--=.::::-=                                       
                                          : . ..::.:-..:::.--:                                      
                                          .....:::..::.-:--..-                                      
                                           .:.....:.-::-:...::                                      
                                           ..-::.:..::::+--::+                                      
                                          .:.....- .=::.:=::--                                      
                                          . -..:: .=::-:--::--                                      
                                         ....... - .-.=:..::::                                      
                                         :...::.-+.:::.::.:=:..                                     
                                         .....: .= : .. .:.....                                     
                                         . . ..   .-.....:....:                                     
                                         . .....  -  . ..:.:...                                     
                                         . .........::.....:...                                     
                                          .. :.::.:..::.:.:..:.                                     
                                        .... ..:.:.=::- ...:....                                    
                                        .......::::...::.-.:::..                                    
                                        . .....-........:.:..:.:                                    
                               @-+   .-*   ....:....:-:.. .::-::                                . :+
                      .*-..+...... .=#*:........:.. @@---:-:::::                            .-*@#@#%
                      @:@%:-=-=:-.-+::==-+=*#**-:.: @@=:-.---:--                      #@@#%@%%#%%#@#
                     @=@%@@**--+--.:.....:*+*****.:.=-=::--::---.                   :%@@#%@@@@@@%#%%
                    @@##*#%%%*+#####****##*##%####=::::::-:---::-              -=*%%#@@@%++--::::::-
                  .%@#*#*#***#-:....... ...======-=*-:-::=:---:::           +###%%@%%@%*=+==*---==--
                 @@#######*#**#%+==+++++::::..-*++*##+::-=-+=%#::       -*##%#@@@@@@@@@+@%@%@@#-=#**
                @%##*-::--:-:--=+#+++===+++++++=+*++*+#+**%%@%@%@: :==-%%%#@@#@@@@@@@@#@*@%#@@@@@*@@
               *****#@@@@@@@@=    @@@@@%@@@ @%@@@#@@@%@=#%@%@@@@@@%@%#%@##%@#%@#@@@@@#@%@@@@@@:--- =
                   @#@@@@@@@@-   .@%@@@@@@@.@%@@+@@####%##@@@@@@@@#@@@%:=++***##+%*+**#@@%@+++:-@@@*
                   @@@@@@@@@@@%%@=@%@+@@@@*@@%@*@@##%@@@@#@@%@@@%@+=+===+=%+=*-@=:#*=@#@@:-%##%%@@@@
                   @%@@@@@@@@%###=. .%@@@ .....:.::+@#@@@@@@@@%-+:--##*++#%*-#++:=+#@*#=-**+%%#*#%@%
                   @#@@@@@@@@@#@%=@@-*@@@:--*=-=*%@@@@@@@@@+=-==--*+-**=*+#=-.%=+=#++*+--:=*#%@**#@@
                   @#@@@@@@@@@@@@=%@%@@@@*##@%@@@*- .#@@%---#-##:=--%@%##=.*%@*%=@+#*+*#%@@%+*%*@@@%
      -#@%@@@@@@**%%*@@@@@@@##**+=@@@@@@@-#-:=%@@@%@@%+**+%##===++#@#@+-@%*++%%##=@+++#@%=*@%%@%@@@%
      #%=%@@@#@%@@@#*@@@@%+@@@@@*% ...=#*==+##**=#+=*+=%#+%%#@@%##==.+%%+**+###%#-%**@@+*@@@##@*@+@@
  @@@@@@%@%@@##%@@@@@@@@@@@@@*+@@@%@@+@++:=+.:+-#=*=%#@%+##++=@@+:+@*******+###+%%*@@##=@%*@@@+%@@@*
@=--*@%@#%@@@@@@@@@=@@@@@@%@@%=%@#%#%@@@@@@@%+=+#%#++@@%*%%#@@@###=#+##+*+=%@=+%#*@=#@#@+%*@*@@@@##@
@@##@@@@@@@@%@@+:@@@@@@@@@@@@@%@@@@@@@@@#%#@#@@@%%@*@-#%*-#-%**%*+**+***##+=#%**%@@@@%#@*#@*@@@#=%@@`}</pre>
        <div className="light-beam"></div>
      </div>
    </div>
  );
};

================
File: src/components/Lighthouse/Stars.tsx
================
import React, { useEffect, useRef } from 'react';

const Stars: React.FC = () => {
  const canvasRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    class Star {
      private x: number;
      private y: number;
      private radius: number;
      private alpha: number;
      private twinkleSpeed: number;
      private startTime: number;

      constructor(canvasWidth: number, canvasHeight: number) {
        this.x = Math.random() * canvasWidth;
        this.y = Math.random() * canvasHeight;
        this.radius = Math.random() * 2;
        this.alpha = Math.random();
        this.twinkleSpeed = 0.001 + Math.random() * 0.001;
        this.startTime = Date.now();
      }

      draw(context: CanvasRenderingContext2D): void {
        const currentTime = Date.now();
        this.alpha = Math.abs(Math.sin((currentTime - this.startTime) * this.twinkleSpeed));
        
        context.beginPath();
        context.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
        context.fillStyle = `rgba(255, 255, 255, ${this.alpha})`;
        context.fill();
      }
    }

    let stars: Star[] = [];
    let animationFrameId: number;

    // Function to create stars
    const createStars = () => {
      stars = Array.from({ length: 200 }, () => new Star(canvas.width, canvas.height));
    };

    // Set canvas size and create stars
    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      createStars(); // Recreate stars whenever canvas is resized
    };

    // Animation loop
    const animate = () => {
      if (!ctx) return;
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      stars.forEach(star => star.draw(ctx));
      animationFrameId = requestAnimationFrame(animate);
    };

    // Initial setup
    resizeCanvas();
    animate();

    // Add resize listener
    window.addEventListener('resize', resizeCanvas);

    // Cleanup
    return () => {
      window.removeEventListener('resize', resizeCanvas);
      cancelAnimationFrame(animationFrameId);
    };
  }, []);

  return (
    <canvas
      ref={canvasRef}
      className="fixed top-0 left-0 w-full h-full pointer-events-none"
    />
  );
};

export default Stars;

================
File: src/components/Moon/Moon.css
================
.moon-container {
  position: fixed;
  top: 20px;
  left: 20px;
  color: #ffffff;
  font-size: 12px;
  line-height: 1;
  white-space: pre;
  z-index: 20;
  pointer-events: none;
}

.moon-ascii {
  opacity: 0.8;
}

.twinkling-star {
  display: inline-block;
}

.twinkling-star:matches(*) {
  transition: opacity 1.2s ease-in-out;
}

.twinkling-star:matches(o) {
  transition: opacity 1.8s ease-in-out;
}

.twinkling-star:matches(-O-) {
  transition: opacity 2.4s ease-in-out;
}

@media (max-width: 768px) {
  .moon-container {
    display: none;
  }
}

================
File: src/components/Moon/Moon.tsx
================
import { useEffect, useState } from 'react';
import './Moon.css';

export const Moon = () => {
  const [isBlinking, setIsBlinking] = useState(false);
  const [starOpacities, setStarOpacities] = useState<{ [key: string]: { [key: number]: { opacity: number, targetOpacity: number, holdTime: number } } }>({});

  // Handle moon eye blinking
  useEffect(() => {
    const blinkInterval = setInterval(() => {
      setIsBlinking(true);
      setTimeout(() => setIsBlinking(false), 200);
    }, Math.random() * 10000 + 5000);

    return () => clearInterval(blinkInterval);
  }, []);

  // Handle star twinkling
  useEffect(() => {
    const starSymbols = ['*', 'o', '-O-'];
    const initialOpacities: { 
      [key: string]: { 
        [key: number]: { 
          opacity: number, 
          targetOpacity: number,
          holdTime: number 
        } 
      } 
    } = {};
    
    // Initialize opacities for each symbol type
    starSymbols.forEach(symbol => {
      initialOpacities[symbol] = {};
      for (let i = 0; i < 5; i++) {
        initialOpacities[symbol][i] = {
          opacity: Math.random() * 0.5 + 0.5,
          targetOpacity: Math.random() * 0.5 + 0.5,
          holdTime: 0
        };
      }
    });

    setStarOpacities(initialOpacities);

    const twinkleInterval = setInterval(() => {
      setStarOpacities(prev => {
        const newOpacities = { ...prev };
        starSymbols.forEach(symbol => {
          Object.keys(newOpacities[symbol]).forEach(key => {
            const numKey = parseInt(key);
            const star = newOpacities[symbol][numKey];

            // If star is being held at full brightness
            if (star.holdTime > 0) {
              star.holdTime -= 100;
              if (star.holdTime <= 0) {
                // When hold time expires, set new target opacity
                star.targetOpacity = Math.random() * 0.3 + 0.2; // Dim target
              }
              return;
            }

            // Chance to start holding at full brightness
            if (Math.random() < 0.01 && star.opacity < 0.7) { // 1% chance when star is dim
              star.targetOpacity = 1;
              star.holdTime = Math.random() * (
                symbol === '*' ? 2000 : 
                symbol === 'o' ? 4000 : 
                6000
              ) + 2000;
              return;
            }

            // Smoothly transition to target opacity
            const speed = symbol === '*' ? 0.03 : symbol === 'o' ? 0.02 : 0.01;
            if (Math.abs(star.opacity - star.targetOpacity) < 0.05) {
              // Set new target when current target is reached
              star.targetOpacity = Math.random() * 0.5 + 0.5;
            }
            
            // Move opacity towards target
            if (star.opacity < star.targetOpacity) {
              star.opacity += speed;
            } else if (star.opacity > star.targetOpacity) {
              star.opacity -= speed;
            }
            
            // Ensure opacity stays within bounds
            star.opacity = Math.max(0.2, Math.min(1, star.opacity));
          });
        });
        return newOpacities;
      });
    }, 100);

    return () => clearInterval(twinkleInterval);
  }, []);

  const renderAsciiArt = () => {
    const lines = [
      'o                     __...__     *',
      '              *   .--\'    __.=-.             o',
      '     |          ./     .-\'',
      '    -O-        /      /',
      '     |        /    "\'/               *',
      `             |     (${isBlinking ? '●' : '@'})`,
      '            |        \\                         .',
      '            |         \\',
      ' *          |       ___\\                  |',
      '             |  .   /  `                 -O-',
      '              \\  `~~\\                     |',
      '         o     \\     \\            *',
      '                `\\    `-.__           .',
      '    .             `--._    `--\'',
      '                       `---~~`                *',
      '            *                   o'
    ];

    return lines.map((line, index) => {
      // Replace ASCII stars with spans that have opacity animation
      const processedLine = line.replace(/[\*o]|-O-/g, (match, offset) => {
        const symbolCounts: { [key: string]: number } = { '*': 0, 'o': 0, '-O-': 0 };
        const opacity = starOpacities[match]?.[symbolCounts[match] % 5]?.opacity || 1;
        symbolCounts[match]++;
        return `<span class="twinkling-star" style="opacity: ${opacity}">${match}</span>`;
      });

      return <div key={index} dangerouslySetInnerHTML={{ __html: processedLine }} />;
    });
  };

  return (
    <div className="moon-container">
      <pre className="moon-ascii">
        {renderAsciiArt()}
      </pre>
    </div>
  );
};

================
File: src/components/Navigation/NavigationMenu.tsx
================
import { useState } from 'react';
import { Link } from 'react-router-dom';

interface MenuItem {
  name: string;
  path: string;
  children?: MenuItem[];
}

const menuData: MenuItem = {
  name: 'me.jamino',
  path: '/',
  children: [
    { name: 'Beautiful NTD', path: '/transit-database' },
    { name: 'Thunderegg Records', path: 'https://www.thundereggrecords.com/' },
    {
      name: 'Minecraft Mods',
      path: '/minecraft-mods',
      children: [
        { name: 'Wynn-Weapon-Bigger', path: '/minecraft-mods/wynn-weapon-bigger' },
        { name: 'WynnVista', path: '/minecraft-mods/wynnvista' },
        { name: 'WynnLODGrabber', path: '/minecraft-mods/wynnlodgrabber' },
        { name: 'WynnBubbles', path: '/minecraft-mods/wynnbubbles' },
        { name: 'Class-Keybind-Profiles', path: '/minecraft-mods/class-keybind-profiles' },
        { name: 'Nimble-ReWynnded', path: '/minecraft-mods/nimble-rewynnded' }
      ]
    },
    {
      name: 'Photos',
      path: '/photos',
      children: [
        { name: 'National Parks', path: '/photos/national-parks' },
        { name: 'New Orleans, LA', path: '/photos/new-orleans' },
        { name: 'Misc', path: '/photos/misc' }
      ]
    },
    { name: 'Biznes Card', path: '/biznes-card' }
  ]
};

const NavigationItem = ({ 
  item, 
  level = 0, 
  isLastChild = false 
}: { 
  item: MenuItem; 
  level?: number;
  isLastChild?: boolean;
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [visited, setVisited] = useState(false);

  const handleClick = () => {
    if (item.children) {
      setIsOpen(!isOpen);
    }
    setVisited(true);
  };

  return (
    <div className="relative">
      <div className="flex items-center h-8">
        <div className="flex items-center">
          {level > 0 && (
            <>
              {Array.from({ length: level - 1 }).map((_, i) => (
                <div
                  key={i}
                  className="w-8 h-8 flex items-center justify-center"
                >
                  <div className="w-[1px] h-full bg-white"/>
                </div>
              ))}
              <div className="w-8 h-8 flex items-center justify-center text-white">
                {isLastChild ? '└' : '├'}
              </div>
              <div className="w-4 h-8 flex items-center justify-center text-white">
                ──
              </div>
            </>
          )}
          <div 
            className="flex items-center cursor-pointer"
            onClick={handleClick}
          >
            <span className="mr-1 text-base">
              {item.children ? (isOpen ? '📂' : '📁') : '📄'}
            </span>
            {item.children && level === 0 ? (
              <Link 
                to={item.path}
                className={`font-mono hover:text-blue-400 ${visited ? 'text-blue-400' : 'text-white'} ${level === 0 ? 'text-xl' : 'text-base'}`}
              >
                {item.name}
              </Link>
            ) : item.children ? (
              <span 
                className={`font-mono hover:text-blue-400 ${visited ? 'text-blue-400' : 'text-white'} ${level === 0 ? 'text-xl' : 'text-base'}`}
              >
                {item.name}
              </span>
            ) : item.path.startsWith('http') ? (
              <a 
                href={item.path}
                target="_blank"
                rel="noopener noreferrer"
                className={`font-mono hover:text-blue-400 ${visited ? 'text-blue-400' : 'text-white'} text-base`}
              >
                {item.name}
              </a>
            ) : (
              <Link 
                to={item.path} 
                className={`font-mono hover:text-blue-400 ${visited ? 'text-blue-400' : 'text-white'} text-base`}
              >
                {item.name}
              </Link>
            )}
          </div>
        </div>
      </div>
      
      {isOpen && item.children && (
        <div className="relative">
          {item.children.map((child, index) => (
            <NavigationItem 
              key={child.path} 
              item={child} 
              level={level + 1}
              isLastChild={index === item.children!.length - 1}
            />
          ))}
        </div>
      )}
    </div>
  );
};

export const NavigationMenu = () => {
  return (
    <div className="font-mono pl-2">
      <NavigationItem item={menuData} />
    </div>
  );
};

================
File: src/components/NowPlaying/NowPlaying.tsx
================
import { useState, useEffect } from 'react';

interface Track {
  name: string;
  artist: string;
}

const LASTFM_API_KEY = process.env.REACT_APP_LASTFM_API_KEY;
const LASTFM_USERNAME = 'bob10234';
const SPOTIFY_PROFILE = 'https://open.spotify.com/user/bob10234?si=394e0893e56d47e3';

export const NowPlaying = () => {
  const [lastTrack, setLastTrack] = useState<Track | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchLastTrack = async () => {
      try {
        console.log('Fetching last track...');
        console.log('API Key:', LASTFM_API_KEY);
        
        const response = await fetch(
          `https://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&user=${LASTFM_USERNAME}&api_key=${LASTFM_API_KEY}&format=json&limit=1`
        );
        
        if (!response.ok) throw new Error('Failed to fetch');
        
        const data = await response.json();
        console.log('LastFM Response:', data);
        
        const track = data.recenttracks.track[0];
        
        setLastTrack({
          name: track.name,
          artist: track.artist['#text']
        });
      } catch (err) {
        setError('Failed to load track info');
        console.error('LastFM Error:', err);
      }
    };

    fetchLastTrack();
    const interval = setInterval(fetchLastTrack, 30000);

    return () => clearInterval(interval);
  }, []);

  const formatTrackText = (name: string, artist: string) => {
    const fullText = `${name} - ${artist}`;
    const lines = fullText.match(/.{1,50}/g) || [fullText]; // Split into chunks of ~50 chars
    
    if (lines.length === 1) {
      return `[${fullText}]`;
    }
    
    return lines.map((line, index) => {
      // Trim whitespace and add brackets
      line = line.trim();
      // Add space at the start for all lines except the first
      const prefix = index === 0 ? '[' : ' [';
      return `${prefix}${line}]`;
    }).join('\n');
  };

  return (
    <div className="fixed top-4 right-4 text-white font-mono z-[100] p-2 rounded max-w-[800px]">
      {error ? (
        'Failed to load track info'
      ) : !lastTrack ? (
        'Loading...'
      ) : (
        <div className="flex flex-col items-end gap-y-2">
          <div className="whitespace-nowrap">Jam JUST listened to</div>
          <a 
            href={SPOTIFY_PROFILE}
            target="_blank"
            rel="noopener noreferrer"
            className="hover:text-blue-400 transition-colors text-right"
            style={{
              display: '-webkit-box',
              WebkitLineClamp: 2,
              WebkitBoxOrient: 'vertical',
              overflow: 'hidden',
              textOverflow: 'ellipsis',
              whiteSpace: 'normal',
              maxWidth: '400px',
            }}
          >
            [{lastTrack.name} - {lastTrack.artist}]
          </a>
        </div>
      )}
    </div>
  );
};

================
File: src/components/Water/Water.css
================
.water-container {
    position: fixed;
    bottom: 0;
    left: 0;
    height: 40px;
    overflow: hidden;
    z-index: 5;
  }
  
  .water-animation {
    color: rgba(100, 149, 237, 0.5);
    font-size: 14px;
    line-height: 1.2;
    white-space: pre;
  }
  
  .wave-1 {
    animation: waveMotion1 8s linear infinite,
               waveFloat1 3s ease-in-out infinite;
  }
  
  .wave-2 {
    animation: waveMotion2 8s linear infinite,
               waveFloat2 3s ease-in-out infinite;
  }
  
  /* First wave animations */
  @keyframes waveMotion1 {
    0% {
      transform: translateX(0%);
    }
    100% {
      transform: translateX(-50%);
    }
  }
  
  @keyframes waveFloat1 {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(4px);
    }
  }
  
  /* Second wave animations (slightly offset) */
  @keyframes waveMotion2 {
    0% {
      transform: translateX(-50%);
    }
    100% {
      transform: translateX(0%);
    }
  }
  
  @keyframes waveFloat2 {
    0%, 100% {
      transform: translateY(4px);
    }
    50% {
      transform: translateY(0);
    }
  }

================
File: src/components/Water/Water.tsx
================
import { useEffect, useState } from 'react';
import './Water.css';

export const Water = () => {
  const [width, setWidth] = useState(window.innerWidth);
  
  useEffect(() => {
    const handleResize = () => {
      setWidth(window.innerWidth);
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const waterWidth = width - 500;
  
  // More detailed wave patterns that cycle through animation
  const wavePatterns = [
    "._.-._.-.,.-~^~-.,_,.-~^~-.,_,.-~^~-.,_,.-~^~-.,_,.-~^~-.,",
    "._.-._.--~^~-.,_,.-~^~-.,_,.-~^~-.,_,.-~^~-.,_,.-~^~-.,_,"
  ];

  return (
    <div className="water-container">
      <pre className="water-animation" style={{ width: `${waterWidth}px` }}>
        {wavePatterns.map((pattern, index) => (
          <div key={index} className={`wave-line wave-${index + 1}`}>
            {pattern.repeat(6)}
          </div>
        ))}
      </pre>
    </div>
  );
};

================
File: src/config/mods.ts
================
export interface ModConfig {
    id: string;
    title: string;
    description: string;
    iconUrl: string;
    githubUrl: string;
    modrinthUrl: string;
    curseforgeUrl: string;
    readmeUrl: string;
  }
  
  export const mods: Record<string, ModConfig> = {
    'wynn-weapon-bigger': {
      id: 'wynn-weapon-bigger',
      title: 'Wynncraft Weapon Bigger',
      description: 'I make your weapon big, duh. A fork of Big Items, Duh designed to only show Wynncraft gear and updated to 1.21.',
      iconUrl: '/path-to-icon.png',
      githubUrl: 'https://github.com/DrBiznes/WynnWeaponViewer',
      modrinthUrl: 'https://modrinth.com/mod/wynnweaponbigger',
      curseforgeUrl: 'https://www.curseforge.com/minecraft/mc-mods/wynnweaponbigger',
      readmeUrl: 'https://raw.githubusercontent.com/DrBiznes/WynnWeaponViewer/master/README.md'
    },
    'wynnlodgrabber': {
      id: 'wynnlodgrabber',
      title: 'WynnLODGrabber',
      description: 'Automatically download the Distant Horizons LODs for Wynncraft',
      iconUrl: '/path-to-icon.png',
      githubUrl: 'https://github.com/DrBiznes/WynnLODGrabber',
      modrinthUrl: 'https://modrinth.com/mod/wynnlodgrabber',
      curseforgeUrl: 'https://www.curseforge.com/minecraft/mc-mods/wynnlodgrabber',
      readmeUrl: 'https://raw.githubusercontent.com/DrBiznes/WynnLODGrabber/master/README.md'
    },
    'wynnvista': {
      id: 'wynnvista',
      title: 'WynnVista',
      description: 'Automagically adjusts Distant Horizons render distance when outside the Wynncraft map.',
      iconUrl: '/path-to-icon.png',
      githubUrl: 'https://github.com/DrBiznes/WynnVista',
      modrinthUrl: 'https://modrinth.com/mod/wynnvista',
      curseforgeUrl: 'https://www.curseforge.com/minecraft/mc-mods/wynnvista',
      readmeUrl: 'https://raw.githubusercontent.com/DrBiznes/WynnVista/master/README.md'
    },
    'wynnbubbles': {
      id: 'wynnbubbles',
      title: 'WynnBubbles',
      description: 'Wynncraft chat floats above players\' heads and changes colors for party, guild, and private chat.',
      iconUrl: '/path-to-icon.png',
      githubUrl: 'https://github.com/DrBiznes/WynnBubbles',
      modrinthUrl: 'https://modrinth.com/mod/wynnbubbles',
      curseforgeUrl: 'https://www.curseforge.com/minecraft/mc-mods/wynnbubbles',
      readmeUrl: 'https://raw.githubusercontent.com/DrBiznes/WynnBubbles/main/README.md'
    },
    'class-keybind-profiles': {
      id: 'class-keybind-profiles',
      title: 'Class Keybind Profiles',
      description: 'Automatically switches between presaved keybind profiles for Wynncraft classes.',
      iconUrl: '/path-to-icon.png',
      githubUrl: 'https://github.com/DrBiznes/Class-Keybind-Profiles',
      modrinthUrl: 'https://modrinth.com/mod/class-keybind-profiles',
      curseforgeUrl: 'https://www.curseforge.com/minecraft/mc-mods/class-keybind-profiles',
      readmeUrl: 'https://raw.githubusercontent.com/DrBiznes/Class-Keybind-Profiles/master/README.md'
    },
    'nimble-rewynnded': {
      id: 'nimble-rewynnded',
      title: 'Nimble ReWynnded',
      description: 'Wynncraft-specific camera utilities, inspired by the mod Nimble.',
      iconUrl: '/path-to-icon.png',
      githubUrl: 'https://github.com/DrBiznes/Nimble-ReWynnded',
      modrinthUrl: 'https://modrinth.com/mod/nimble-rewynnded',
      curseforgeUrl: 'https://www.curseforge.com/minecraft/mc-mods/nimble-rewynnded',
      readmeUrl: 'https://raw.githubusercontent.com/DrBiznes/Nimble-ReWynnded/master/README.md'
    }
  };

================
File: src/config/photos.ts
================
interface PhotoItem {
  imageUrl: string;
  title: string;
  description: string;
}

interface PhotoSet {
  id: string;
  title: string;
  description: string;
  photos: PhotoItem[];
}

interface PhotoGallery {
  id: string;
  title: string;
  description: string;
  photoSets: PhotoSet[];
}

export const photoGalleries: Record<string, PhotoGallery> = {
  'national-parks': {
    id: 'national-parks',
    title: 'National Parks',
    description: 'A collection of photographs from various National Parks across the United States',
    photoSets: [
      {
        id: 'katmai',
        title: 'Katmai National Park',
        description: 'BEARS BEARS BEARS BEARS BEARS',
        photos: [
          {
            imageUrl: '/photos/national-parks/katmai/noblebear.jpeg',
            title: 'Valley View',
            description: 'Expansive valley view with Mount McKinley in the background'
          },
          {
            imageUrl: '/photos/national-parks/katmai/iditarod.jpeg',
            title: 'Serene Lake',
            description: 'A tranquil lake reflecting the surrounding mountains'
          },
          {
            imageUrl: '/photos/national-parks/katmai/backwardbear.jpeg',
            title: 'Wildlife',
            description: 'A glimpse of the diverse wildlife in the park'
          },
          {
            imageUrl: '/photos/national-parks/katmai/tenthousandsmokes.jpeg',
            title: 'Sunset Vista',
            description: 'A breathtaking sunset over the rugged landscape'
          }
        ]
      },
      // Add more photo sets here...
    ]
  },
  // Add more galleries here...
};

/*
  To expand the gallery using the four-photo system:
  1. Add a new PhotoSet object to the `photoSets` array within the desired gallery.
  2. Each PhotoSet should contain:
     - A `title` for the set.
     - A `description` for the set.
     - An array of `photos`, each with:
       - `imageUrl`: Path to the image.
       - `title`: Title of the photo.
       - `description`: Description of the photo.
  3. Ensure each set contains exactly four photos for consistent layout.
  4. Add additional galleries by creating new entries in the `photoGalleries` object.
  
  To add multiple photo sets to one page:
  - Simply add multiple PhotoSet objects to the `photoSets` array.
  - Each set will be displayed vertically on the page in the order they appear in the array.
  Example:
    photoSets: [
      { first set of 4 photos... },
      { second set of 4 photos... },
      { third set of 4 photos... }
    ]
*/

================
File: src/hooks/useReadme.ts
================
import { useState, useEffect } from 'react';

export const useReadme = (readmeUrl: string) => {
  const [readme, setReadme] = useState<string>('');
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetch(readmeUrl)
      .then(res => res.text())
      .then(text => {
        setReadme(text);
        setIsLoading(false);
      })
      .catch(err => {
        setError(err.message);
        setIsLoading(false);
      });
  }, [readmeUrl]);

  return { readme, isLoading, error };
};

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: black;
}

/* Hide scrollbar for Chrome, Safari and Opera */
::-webkit-scrollbar {
  display: none;
}

/* Hide scrollbar for IE, Edge and Firefox */
* {
  -ms-overflow-style: none;  /* IE and Edge */
  scrollbar-width: none;  /* Firefox */
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

.no-scroll {
  overflow: hidden;
  height: 100vh;
  position: fixed;
  width: 100%;
}

================
File: src/index.tsx
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================
File: src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: src/pages/BiznesCard.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { Water } from '../components/Water/Water';

const ASCII = {
  topLeft: '┌',
  topRight: '┐',
  bottomLeft: '└',
  bottomRight: '┘',
  horizontal: '─',
  vertical: '│',
  teeRight: '├',
  teeLeft: '┤'
};

const BORDER = {
  topLeft: '╔',
  topRight: '╗',
  bottomLeft: '╚',
  bottomRight: '╝',
  horizontal: '═',
  vertical: '║'
};

interface SocialLink {
  platform: string;
  username: string;
  url: string;
}

const socialLinks: SocialLink[] = [
  { platform: 'GitHub', username: '@DrBiznes', url: 'https://github.com/DrBiznes' },
  { platform: 'Twitter', username: '@JaminoTrue', url: 'https://twitter.com/JaminoTrue' },
  { platform: 'LinkedIn', username: 'jamino', url: 'https://linkedin.com/in/jamino' },
  { platform: 'Discord', username: 'jamino', url: 'https://discord.gg/your-server' },
  { platform: 'Email', username: 'contact@jamino.dev', url: 'mailto:contact@jamino.dev' }
];

const drawBox = (title: string, content: string[]) => {
  const maxWidth = 60;
  const processedContents: string[] = [];
  
  content.forEach((line) => {
    processedContents.push(line);
  });

  const contentWidth = maxWidth + 4;
  
  const drawLine = (start: string, middle: string, end: string) => {
    return `${start}${middle.repeat(contentWidth)}${end}`;
  };

  const drawContentLine = (content: string) => {
    return `${ASCII.vertical} ${content.padEnd(contentWidth - 2)} ${ASCII.vertical}`;
  };

  return [
    drawLine(ASCII.topLeft, ASCII.horizontal, ASCII.topRight),
    drawContentLine(title),
    drawLine(ASCII.teeRight, ASCII.horizontal, ASCII.teeLeft),
    ...processedContents.map(content => drawContentLine(content)),
    drawLine(ASCII.bottomLeft, ASCII.horizontal, ASCII.bottomRight)
  ].join('\n');
};

const drawBusinessCard = (content: string[]) => {
  const width = 76;
  
  const topLine = `${BORDER.topLeft}${BORDER.horizontal.repeat(width)}${BORDER.topRight}`;
  const bottomLine = `${BORDER.bottomLeft}${BORDER.horizontal.repeat(width)}${BORDER.bottomRight}`;

  return (
    <div className="font-mono">
      <pre>{topLine}</pre>
      {content.map((line, i) => (
        <pre key={i}>
          {BORDER.vertical} {line.padEnd(width - 2)} {BORDER.vertical}
        </pre>
      ))}
      <pre>{bottomLine}</pre>
    </div>
  );
};

export const BiznesCard = () => {
  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="min-h-screen w-full flex flex-col items-center justify-center font-mono text-white relative"
    >
      <div className="flex flex-col items-center space-y-8 p-8">
        {/* Business card with double-line border */}
        <div className="whitespace-pre text-left w-[800px]">
          {drawBusinessCard([
            'TR                                                     James P. Femino',
            '                                                          Treasurer',
            '',
            '',
            '',
            '                                        Thunderegg Records, Non Profit',
            '                                                   Eugene, Oregon',
            '                                   One of the worlds top 3 problem solvers'
          ])}
        </div>

        {/* Original ASCII box for the poem */}
        <div className="whitespace-pre text-left w-[500px]">
          <pre>
            {drawBox('I Know NOTHING', [
              'God, once more I sit and wait,',
              'While Maven spins my mental state,',
              'These dependencies cascade,',
              'Like choices that I shouldn\'t have made.',
              '',
              'Each error cryptic as can be,',
              'Stack traces to infinity,',
              'NullPointerException hell,',
              'Which line? Only God can tell.'
            ])}
          </pre>
        </div>

        <div className="flex flex-wrap justify-center gap-3 w-full mt-4">
          {socialLinks.map(link => (
            <a
              key={link.platform}
              href={link.url}
              target="_blank"
              rel="noopener noreferrer"
              className="px-3 py-1 border border-white hover:bg-white/10 transition-colors"
            >
              [{link.platform}]
            </a>
          ))}
        </div>
      </div>
      <Water />
    </motion.div>
  );
};

export default BiznesCard;

================
File: src/pages/Home.tsx
================
import { useEffect } from 'react';
import { motion } from 'framer-motion';
import { Water } from '../components/Water/Water';

export const Home = () => {
  useEffect(() => {
    document.body.classList.add('no-scroll');
    return () => {
      document.body.classList.remove('no-scroll');
    };
  }, []);

  return (
    <div className="relative min-h-screen">
      <motion.div 
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="relative h-screen z-20 flex flex-col justify-end"
      >
        <div className="absolute top-2 left-1/2 -translate-x-1/2 z-30">
          <h1 className="text-4xl font-bold text-white mb-4 text-center">
            Welcome to my website!$!!$!
          </h1>
          <p className="text-gray-300 text-center">
            ENGAGE with EVERYTHING by me Jamino EXPLORE my stuff
          </p>
        </div>
        <Water />
      </motion.div>
    </div>
  );
};

================
File: src/pages/ModPage.tsx
================
import React from 'react';
import { useParams, Navigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import ReactMarkdown from 'react-markdown';
import { useReadme } from '../hooks/useReadme';
import { mods } from '../config/mods';

const ASCII = {
  topLeft: '┌',
  topRight: '┐',
  bottomLeft: '└',
  bottomRight: '┘',
  horizontal: '─',
  vertical: '│',
  teeRight: '├',
  teeLeft: '┤',
  teeDown: '┬',
  teeUp: '┴',
  cross: '┼'
};

export const ModPage = () => {
  const { modId } = useParams();
  const mod = modId ? mods[modId] : undefined;
  
  const { readme, isLoading, error } = useReadme(mod?.readmeUrl ?? '');

  if (!mod) {
    return <Navigate to="/404" replace />;
  }

  const drawHorizontalLine = (length: number) => ASCII.horizontal.repeat(length);
  
  const padContentLine = (prefix: string, content: string, totalWidth: number) => {
    const contentSpace = totalWidth - prefix.length - 3; // -3 for the vertical bars and space
    const paddedContent = content.slice(0, contentSpace).padEnd(contentSpace);
    return `${ASCII.vertical} ${prefix}${paddedContent} ${ASCII.vertical}`;
  };

  const getMaxContentWidth = (items: string[]) => {
    return Math.max(...items.map(item => item.length)) + 4; // +4 for padding
  };

  const wrapText = (text: string, maxWidth: number) => {
    const words = text.split(' ');
    const lines: string[] = [];
    let currentLine = '';

    words.forEach(word => {
      if ((currentLine + ' ' + word).length <= maxWidth) {
        currentLine = currentLine ? `${currentLine} ${word}` : word;
      } else {
        lines.push(currentLine);
        currentLine = word;
      }
    });
    if (currentLine) {
      lines.push(currentLine);
    }
    return lines;
  };

  const drawBox = (contents: { label: string; content: string }[]) => {
    const maxWidth = 60; // Fixed width for consistent appearance
    const processedContents: string[] = [];
    
    contents.forEach(({ label, content }) => {
      const labelWidth = label.length;
      const contentWidth = maxWidth - labelWidth;
      const wrappedContent = wrapText(content, contentWidth);
      
      processedContents.push(`${label}${wrappedContent[0]}`);
      wrappedContent.slice(1).forEach(line => {
        processedContents.push(`${' '.repeat(labelWidth)}${line}`);
      });
    });

    const contentWidth = maxWidth + 4;
    
    const drawLine = (start: string, middle: string, end: string) => {
      return `${start}${middle.repeat(contentWidth)}${end}`;
    };

    const drawContentLine = (content: string) => {
      return `${ASCII.vertical} ${content.padEnd(contentWidth - 2)} ${ASCII.vertical}`;
    };

    return [
      drawLine(ASCII.topLeft, ASCII.horizontal, ASCII.topRight),
      ...processedContents.map((content, index) => [
        drawContentLine(content),
        // Only add separator line between different fields, not between wrapped lines
        index < processedContents.length - 1 && 
        !processedContents[index + 1].startsWith(' ') ? 
          drawLine(ASCII.teeRight, ASCII.horizontal, ASCII.teeLeft) : null
      ]).flat().filter(Boolean),
      drawLine(ASCII.bottomLeft, ASCII.horizontal, ASCII.bottomRight)
    ].join('\n');
  };

  return (
    <motion.div 
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="relative min-h-screen w-full overflow-y-auto font-mono"
    >
      <div 
        className="mx-auto px-4 pb-32 pt-16 relative"
        style={{ 
          marginLeft: '25%',
          marginRight: '20%',
          maxWidth: '900px'
        }}
      >
        {/* Terminal Window for Mod Info */}
        <div className="mb-8 text-white bg-black/90 border border-white">
          <div className="bg-white/10 px-2 py-1 border-b border-white">
            <span>mod-info</span>
          </div>
          
          <div className="p-4">
            <div className="mb-4 overflow-x-auto">
              <div className="whitespace-pre">
                {drawBox([
                  { label: 'MOD: ', content: mod.title },
                  { label: 'DESC: ', content: mod.description }
                ])}
              </div>
            </div>

            <div className="overflow-x-auto">
              <div className="flex gap-3 text-black min-w-fit">
                {[
                  { url: mod.githubUrl, label: "Github" },
                  { url: mod.modrinthUrl, label: "Modrinth" },
                  { url: mod.curseforgeUrl, label: "CurseForge" }
                ].map(link => (
                  <a
                    key={link.label}
                    href={link.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="px-3 py-1 bg-white hover:bg-gray-200 transition-colors"
                  >
                    [{link.label}]
                  </a>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* README Terminal Window */}
        <div className="text-white bg-black/90 border border-white">
          <div className="bg-white/10 px-2 py-1 border-b border-white">
            <span>readme.md</span>
          </div>
          
          <div className="p-4">
            {isLoading ? (
              <div className="flex justify-center items-center h-32">
                <div className="animate-pulse">LOADING...</div>
              </div>
            ) : error ? (
              <div className="text-red-400 p-4">
                ERROR: {error}
              </div>
            ) : (
              <ReactMarkdown 
                className="prose prose-invert max-w-none"
                components={{
                  img: ({node, ...props}) => (
                    <img 
                      {...props} 
                      className="max-w-full h-auto border border-white" 
                      loading="lazy"
                    />
                  ),
                  a: ({node, ...props}) => (
                    <a 
                      {...props} 
                      className="text-white hover:text-gray-300 underline" 
                      target="_blank" 
                      rel="noopener noreferrer" 
                    />
                  ),
                  h1: ({node, ...props}) => (
                    <h1 {...props} className="text-2xl font-bold mt-8 mb-4 first:mt-0 border-b border-white" />
                  ),
                  h2: ({node, ...props}) => (
                    <h2 {...props} className="text-xl font-bold mt-6 mb-3 border-b border-white" />
                  ),
                  p: ({node, ...props}) => (
                    <p {...props} className="mb-4" />
                  ),
                  ul: ({node, ...props}) => (
                    <ul {...props} className="list-none mb-4 space-y-1">
                      {React.Children.map(props.children, child => {
                        if (React.isValidElement(child)) {
                          return <li>{`${ASCII.teeRight} ${child.props.children}`}</li>
                        }
                        return null;
                      })}
                    </ul>
                  ),
                  ol: ({node, ...props}) => (
                    <ol {...props} className="list-none mb-4 space-y-1">
                      {React.Children.map(props.children, (child, index) => {
                        if (React.isValidElement(child)) {
                          return <li>{`[${index + 1}] ${child.props.children}`}</li>
                        }
                        return null;
                      })}
                    </ol>
                  ),
                  code: ({node, inline, ...props}) => (
                    inline ? 
                      <code {...props} className="bg-white/10 px-1" /> :
                      <code {...props} className="block bg-white/10 p-4 overflow-x-auto" />
                  ),
                  strong: ({node, ...props}) => (
                    <strong {...props} className="text-gray-300 font-bold" />
                  ),
                  em: ({node, ...props}) => (
                    <em {...props} className="text-gray-200 italic" />
                  )
                }}
              >
                {readme}
              </ReactMarkdown>
            )}
          </div>
        </div>
      </div>
    </motion.div>
  );
};

export default ModPage;

================
File: src/pages/PhotosPage.tsx
================
import React, { useState } from 'react';
import { useParams, Navigate } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { photoGalleries } from '../config/photos';

interface PhotoItem {
  imageUrl: string;
  title: string;
  description: string;
}

const ASCII = {
  topLeft: '┌',
  topRight: '┐',
  bottomLeft: '└',
  bottomRight: '┘',
  horizontal: '─',
  vertical: '│',
  teeRight: '├',
  teeLeft: '┤'
};

const PhotoSet: React.FC<{ 
  photos: PhotoItem[]; 
  title: string; 
  description: string;
  setIndex: number;
}> = ({
  photos,
  title,
  description,
  setIndex
}) => {
  const [selectedPhoto, setSelectedPhoto] = useState<number | null>(null);
  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);
  const [isHoveringAnyPhoto, setIsHoveringAnyPhoto] = useState(false);

  // Define positions directly for each photo
  const positions = [
    {
      wrapperStyle: {
        left: '35%',
        top: '15%',
        transform: 'rotate(-12deg)',
        width: '400px',
        position: 'absolute' as const,
        zIndex: 2,
      },
    },
    {
      wrapperStyle: {
        right: '10%',
        top: '25%',
        transform: 'rotate(6deg)',
        width: '500px',
        position: 'absolute' as const,
        zIndex: 3,
      },
    },
    {
      wrapperStyle: {
        left: '28%',
        bottom: '20%',
        transform: 'rotate(-8deg)',
        width: '450px',
        position: 'absolute' as const,
        zIndex: 1,
      },
    },
    {
      wrapperStyle: {
        right: '15%',
        bottom: '15%',
        transform: 'rotate(4deg)',
        width: '380px',
        position: 'absolute' as const,
        zIndex: 4,
      },
    },
  ];

  const getZIndex = (index: number) => {
    return hoveredIndex === index ? 50 : 2;
  };

  const drawBox = (title: string, content: string[], isCenter: boolean = false) => {
    const maxWidth = isCenter ? 80 : 40;
    const processedContents = content.flatMap(text => {
      const words = text.split(' ');
      const lines: string[] = [];
      let currentLine = '';

      words.forEach(word => {
        if ((currentLine + ' ' + word).length <= maxWidth) {
          currentLine = currentLine ? `${currentLine} ${word}` : word;
        } else {
          lines.push(currentLine);
          currentLine = word;
        }
      });
      if (currentLine) lines.push(currentLine);
      return lines;
    });

    return (
      <div className="text-white font-mono whitespace-pre break-words">
        {title && (
          <div className="mb-2">
            {`${ASCII.topLeft}${ASCII.horizontal.repeat(Math.min(title.length + 2, maxWidth))}${ASCII.topRight}`}
            {`\n${ASCII.vertical} ${title.slice(0, maxWidth - 2)} ${ASCII.vertical}\n`}
            {`${ASCII.bottomLeft}${ASCII.horizontal.repeat(Math.min(title.length + 2, maxWidth))}${ASCII.bottomRight}`}
          </div>
        )}
        {processedContents.map((line, index) => (
          <div key={index} className="opacity-80">
            {line}
          </div>
        ))}
      </div>
    );
  };

  return (
    <div className="relative h-screen overflow-hidden" style={{ marginLeft: '250px' }}>
      {/* Center Description Box */}
      <motion.div 
        initial={{ opacity: 0 }}
        animate={{ opacity: isHoveringAnyPhoto ? 0 : 1 }}
        transition={{ delay: 0.2 }}
        className="absolute left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2 z-10"
      >
        <div className="text-white bg-black/90 border border-white max-w-xl">
          <div className="bg-white/10 px-3 py-1.5 border-b border-white">
            <span className="text-lg">{title}</span>
          </div>
          <div className="p-4">
            {drawBox('', [description], true)}
          </div>
        </div>
      </motion.div>

      {/* Photos */}
      {photos.map((photo, index) => (
        <motion.div
          key={index}
          style={{
            ...positions[index].wrapperStyle,
            zIndex: getZIndex(index),
            transition: 'z-index 0ms'
          }}
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: index * 0.2 }}
          onMouseEnter={() => {
            setHoveredIndex(index);
            setIsHoveringAnyPhoto(true);
          }}
          onMouseLeave={() => {
            setHoveredIndex(null);
            setIsHoveringAnyPhoto(false);
          }}
        >
          <motion.div
            className="group cursor-pointer"
            whileHover={{ 
              scale: 1.05,
              rotate: 0,
              transition: { duration: 0.3 }
            }}
            onClick={() => setSelectedPhoto(index)}
          >
            <div className="relative">
              <img
                src={photo.imageUrl}
                alt={photo.title}
                className="object-cover border-4 border-white shadow-2xl"
                style={{ height: '300px', width: '100%' }}
              />
              <motion.div 
                className="absolute inset-0 bg-gradient-to-b from-black/0 to-black/50
                         opacity-0 group-hover:opacity-100 transition-opacity duration-300"
              />
            </div>
            
            <motion.div 
              className="absolute -bottom-20 left-0 right-0 opacity-0 
                       group-hover:opacity-100 transition-opacity duration-300
                       bg-black/80 p-2 border border-white max-w-full overflow-hidden"
              style={{ width: positions[index].wrapperStyle.width }}
            >
              {drawBox(photo.title, [photo.description], false)}
            </motion.div>
          </motion.div>
        </motion.div>
      ))}

      {/* Fullscreen View */}
      <AnimatePresence>
        {selectedPhoto !== null && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/90 z-50 flex items-center justify-center"
            onClick={() => setSelectedPhoto(null)}
          >
            <motion.div
              initial={{ scale: 0.8 }}
              animate={{ scale: 1 }}
              exit={{ scale: 0.8 }}
              className="relative max-w-[90vw] max-h-[90vh]"
            >
              <img
                src={photos[selectedPhoto].imageUrl}
                alt={photos[selectedPhoto].title}
                className="max-w-full max-h-[90vh] border-4 border-white shadow-2xl"
              />
              <div className="absolute bottom-0 left-0 right-0 p-4 bg-black/80">
                {drawBox(photos[selectedPhoto].title, [photos[selectedPhoto].description], false)}
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export const PhotosPage = () => {
  const { galleryId } = useParams();
  const gallery = galleryId ? photoGalleries[galleryId] : undefined;

  if (!gallery) {
    return <Navigate to="/404" replace />;
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="relative min-h-screen w-full overflow-y-auto font-mono"
    >
      {gallery.photoSets.map((set, index) => (
        <PhotoSet
          key={index}
          setIndex={index}
          title={set.title}
          description={set.description}
          photos={set.photos}
        />
      ))}
    </motion.div>
  );
};

export default PhotosPage;

================
File: src/pages/TransitDatabase.tsx
================
import { motion } from 'framer-motion';
import { Water } from '../components/Water/Water';

export const TransitDatabase = () => {
  return (
    <motion.div 
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="h-screen flex items-center justify-center"
    >
      <h1 
        style={{ fontFamily: 'Times New Roman' }}
        className="text-4xl text-white"
      >
        Coming soon :)
      </h1>
      <Water />
    </motion.div>
  );
};

export default TransitDatabase;

================
File: src/react-app-env.d.ts
================
/// <reference types="react-scripts" />

================
File: src/reportWebVitals.ts
================
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: src/setupTests.ts
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: tailwind.config.js
================
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
    "./public/index.html"
  ],
  theme: {
    extend: {},
  },
  plugins: [
    require('@tailwindcss/typography'),
  ],
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}
