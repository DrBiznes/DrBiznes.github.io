This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-06T02:17:49.305Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
package.json
postcss.config.js
public/404.html
public/CNAME
public/index.html
public/manifest.json
public/robots.txt
public/sitemap.txt
README.md
src/App.css
src/App.test.tsx
src/App.tsx
src/components/Layout/Layout.tsx
src/components/Lighthouse/Lighthouse.css
src/components/Lighthouse/Lighthouse.tsx
src/components/Lighthouse/Stars.tsx
src/components/Moon/Moon.css
src/components/Moon/Moon.tsx
src/components/Navigation/NavigationMenu.tsx
src/components/NowPlaying/NowPlaying.tsx
src/components/Water/Water.css
src/components/Water/Water.tsx
src/config/mods.ts
src/config/photos.ts
src/hooks/useReadme.ts
src/index.css
src/index.tsx
src/logo.svg
src/pages/BiznesCard.tsx
src/pages/EmailPage.tsx
src/pages/GalleryView.tsx
src/pages/Home.tsx
src/pages/JamPage.tsx
src/pages/ModPage.tsx
src/pages/NotFound.tsx
src/pages/PhotosPage.tsx
src/pages/TransitDatabase.tsx
src/react-app-env.d.ts
src/reportWebVitals.ts
src/setupTests.ts
tailwind.config.js
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: package.json
================
{
  "name": "my-website",
  "version": "0.1.0",
  "private": true,
  "homepage": "https://www.jamino.me",
  "dependencies": {
    "@emailjs/browser": "^4.4.1",
    "@heroicons/react": "^2.2.0",
    "@tailwindcss/typography": "^0.5.10",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "@types/node": "^16.18.120",
    "date-fns": "^4.1.0",
    "framer-motion": "^11.11.17",
    "lightgallery": "^2.8.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-fast-marquee": "^1.6.5",
    "react-markdown": "^8.0.7",
    "react-router-dom": "^7.0.1",
    "react-scripts": "5.0.1",
    "typescript": "^4.9.5",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "predeploy": "npm run build",
    "deploy": "gh-pages -d build"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "autoprefixer": "^10.4.20",
    "gh-pages": "^6.2.0",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.15"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: public/404.html
================
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Single Page Apps for GitHub Pages</title>
    <script type="text/javascript">
      // Single Page Apps for GitHub Pages
      // MIT License
      // https://github.com/rafgraph/spa-github-pages
      // This script takes the current url and converts the path and query
      // string into just a query string, and then redirects the browser
      // to the new url with only a query string and hash fragment,
      // e.g. https://www.foo.tld/one/two?a=b&c=d#qwe, becomes
      // https://www.foo.tld/?/one/two&a=b~and~c=d#qwe
      // Note: this 404.html file must be at least 512 bytes for it to work
      // with Internet Explorer (it is currently > 512 bytes)

      // If you're creating a Project Pages site and NOT using a custom domain,
      // then set pathSegmentsToKeep to 1 (enterprise users may need to set it to > 1).
      // This way the code will only replace the route part of the path, and not
      // the real directory in which the app resides, for example:
      // https://username.github.io/repo-name/one/two?a=b&c=d#qwe becomes
      // https://username.github.io/repo-name/?/one/two&a=b~and~c=d#qwe
      // Otherwise, leave pathSegmentsToKeep as 0.
      var pathSegmentsToKeep = 0;

      var l = window.location;
      l.replace(
        l.protocol + '//' + l.hostname + (l.port ? ':' + l.port : '') +
        l.pathname.split('/').slice(0, 1 + pathSegmentsToKeep).join('/') + '/?/' +
        l.pathname.slice(1).split('/').slice(pathSegmentsToKeep).join('/').replace(/&/g, '~and~') +
        (l.search ? '&' + l.search.slice(1).replace(/&/g, '~and~') : '') +
        l.hash
      );

    </script>
  </head>
  <body>
  </body>
</html>

================
File: public/CNAME
================
www.jamino.me

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Jamino.me - ENGAGE & EXPLORE"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Jamino.me</title>
    <link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:wght@400;500;600&display=swap" rel="stylesheet">
    <script type="text/javascript">
      // Single Page Apps for GitHub Pages
      // MIT License
      // https://github.com/rafgraph/spa-github-pages
      // This script checks to see if a redirect is present in the query string,
      // converts it back into the correct url and adds it to the
      // browser's history using window.history.replaceState(...),
      // which won't cause the browser to attempt to load the new url.
      // When the single page app is loaded further down in this file,
      // the correct url will be waiting in the browser's history for
      // the single page app to route accordingly.
      (function(l) {
        if (l.search[1] === '/' ) {
          var decoded = l.search.slice(1).split('&').map(function(s) { 
            return s.replace(/~and~/g, '&')
          }).join('?');
          window.history.replaceState(null, null,
              l.pathname.slice(0, -1) + decoded + l.hash
          );
        }
      }(window.location))
    </script>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "Jamino.me",
  "name": "Jamino.me",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
User-agent: *
Allow: /
Sitemap: https://www.jamino.me/sitemap.txt

================
File: public/sitemap.txt
================
https://www.jamino.me/?/
https://www.jamino.me/?/minecraft-mods/wynn-weapon-bigger
https://www.jamino.me/?/minecraft-mods/wynnvista
https://www.jamino.me/?/minecraft-mods/wynnlodgrabber
https://www.jamino.me/?/minecraft-mods/wynnbubbles
https://www.jamino.me/?/minecraft-mods/class-keybind-profiles
https://www.jamino.me/?/minecraft-mods/nimble-rewynnded
https://www.jamino.me/?/transit-database
https://www.jamino.me/?/biznes-card
https://www.jamino.me/?/photos/national-parks
https://www.jamino.me/?/photos/national-parks/katmai
https://www.jamino.me/?/photos/national-parks/katmai/gallery
https://www.jamino.me/?/photos/national-parks/yosemite-summer-2024
https://www.jamino.me/?/photos/national-parks/yosemite-summer-2024/gallery
https://www.jamino.me/?/photos/national-parks/yosemite-winter-2023
https://www.jamino.me/?/photos/national-parks/yosemite-winter-2023/gallery
https://www.jamino.me/?/photos/american-south
https://www.jamino.me/?/photos/american-south/new-orleans
https://www.jamino.me/?/photos/american-south/new-orleans/gallery
https://www.jamino.me/?/photos/american-south/saint-francisville
https://www.jamino.me/?/photos/american-south/saint-francisville/gallery
https://www.jamino.me/?/jam
https://www.jamino.me/?/email

================
File: README.md
================
# Getting Started with Create React App

Please don't use my last.fm API key for nefarious purposes D:

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

================
File: src/App.css
================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

================
File: src/App.test.tsx
================
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: src/App.tsx
================
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import { Layout } from './components/Layout/Layout';
import { Home } from './pages/Home';
import { ModPage } from './pages/ModPage';
import { TransitDatabase } from './pages/TransitDatabase';
import { BiznesCard } from './pages/BiznesCard';
import { PhotosPage } from './pages/PhotosPage';
import { GalleryView } from './pages/GalleryView';
import NotFound from './pages/NotFound';
import { JamPage } from './pages/JamPage';
import { EmailPage } from './pages/EmailPage';

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Layout />}>
          <Route index element={<Home />} />
          <Route path="/minecraft-mods/:modId" element={<ModPage />} />
          <Route path="/transit-database" element={<TransitDatabase />} />
          <Route path="/biznes-card" element={<BiznesCard />} />
          <Route path="/photos/:galleryId" element={<PhotosPage />} />
          <Route path="/photos/:galleryId/:setId" element={<PhotosPage />} />
          <Route path="/photos/:galleryId/:setId/gallery" element={<GalleryView />} />
          <Route path="/jam" element={<JamPage />} />
          <Route path="/email" element={<EmailPage />} />
          <Route path="*" element={<NotFound />} />
        </Route>
      </Routes>
    </BrowserRouter>
  );
}

export default App;

================
File: src/components/Layout/Layout.tsx
================
import { NavigationMenu } from '../Navigation/NavigationMenu';
import Stars from '../Lighthouse/Stars';
import { Outlet, useLocation } from 'react-router-dom';
import { Lighthouse } from '../Lighthouse/Lighthouse';
import { Moon } from '../Moon/Moon';
import { NowPlaying } from '../NowPlaying/NowPlaying';

export const Layout = () => {
  const location = useLocation();
  const isPhotosPage = location.pathname.includes('/photos');
  const isGalleryViewPage = location.pathname.includes('/gallery');
  
  return (
    <div className="relative min-h-screen bg-[#1A1A1A] overflow-hidden">
      <div className="fixed inset-0 z-0">
        <Stars />
      </div>
      
      {!isGalleryViewPage && (
        <div className="fixed top-0 right-[15%] z-10">
          <Moon />
        </div>
      )}
      
      {!isPhotosPage && (
        <div className="fixed bottom-0 right-0 z-10">
          <Lighthouse />
        </div>
      )}
      
      <main className="relative z-20">
        <Outlet />
      </main>

      {!isGalleryViewPage && (
        <>
          <div className="fixed bottom-0 left-0 z-30">
            <NowPlaying />
          </div>

          <div className="fixed top-1/2 -translate-y-1/2 left-[8%] z-50">
            <NavigationMenu />
          </div>
        </>
      )}
    </div>
  );
};

================
File: src/components/Lighthouse/Lighthouse.css
================
.lighthouse-scene {
  position: fixed;
  bottom: -78px;
  right: 0;
  height: 800px;
  width: 800px;
  pointer-events: none;
}

.lighthouse {
  position: absolute;
  bottom: 80px;
  right: 0;
  color: #ffffff;
  font-size: 10px;
  white-space: pre;
  text-align: center;
  line-height: 1;
}

.light-beam {
  position: absolute;
  top: 70px;
  left: 53%;
  width: 150px;
  height: 15px;
  background: linear-gradient(90deg, rgba(255, 255, 255, 0.8), transparent);
  transform-origin: left;
  animation: rotate 4s linear infinite;
  transform: perspective(500px) rotateY(0deg);
  margin-left: -3px;
}

@keyframes rotate {
  from {
    transform: perspective(500px) rotateY(0deg);
  }
  to {
    transform: perspective(500px) rotateY(360deg);
  }
}

================
File: src/components/Lighthouse/Lighthouse.tsx
================
import './Lighthouse.css';

export const Lighthouse = () => {
  return (
    <div className="lighthouse-scene">
      <div className="lighthouse">
        <pre>{`                                                                                                  
                                                   @@                                               
                                                .*=+=**.                                            
                                              :**#%%%%#@%-                                          
                                             @@@@@@@@@@@@@@                                         
                                            .% +  -  :. = -                                         
                                             % =  =  :. = :                                         
                                             % =  =  :. - :                                         
                                           . # -  -  .. : .                                         
                                           -@@@@@@@%%@@@@@@@                                        
                                        @   . ......+.....:   @                                     
                                        @@  - .... .=......  @@                                     
                                        *@: @-::.::.*.::::* -@*:                                    
                                        -@@:#.:.-:::+ ::::* @@=:                                    
                                        =@@@@@@@%%%@%%%%@@@@@@@=                                    
                                          -=+-=--:.-.::..:---+                                      
                                          :+*++=---=:=+==++**.                                      
                                           ..:..=... ::::-::-                                       
                                          - . .....--=.::::-=                                       
                                          : . ..::.:-..:::.--:                                      
                                          .....:::..::.-:--..-                                      
                                           .:.....:.-::-:...::                                      
                                           ..-::.:..::::+--::+                                      
                                          .:.....- .=::.:=::--                                      
                                          . -..:: .=::-:--::--                                      
                                         ....... - .-.=:..::::                                      
                                         :...::.-+.:::.::.:=:..                                     
                                         .....: .= : .. .:.....                                     
                                         . . ..   .-.....:....:                                     
                                         . .....  -  . ..:.:...                                     
                                         . .........::.....:...                                     
                                          .. :.::.:..::.:.:..:.                                     
                                        .... ..:.:.=::- ...:....                                    
                                        .......::::...::.-.:::..                                    
                                        . .....-........:.:..:.:                                    
                               @-+   .-*   ....:....:-:.. .::-::                                . :+
                      .*-..+...... .=#*:........:.. @@---:-:::::                            .-*@#@#%
                      @:@%:-=-=:-.-+::==-+=*#**-:.: @@=:-.---:--                      #@@#%@%%#%%#@#
                     @=@%@@**--+--.:.....:*+*****.:.=-=::--::---.                   :%@@#%@@@@@@%#%%
                    @@##*#%%%*+#####****##*##%####=::::::-:---::-              -=*%%#@@@%++--::::::-
                  .%@#*#*#***#-:....... ...======-=*-:-::=:---:::           +###%%@%%@%*=+==*---==--
                 @@#######*#**#%+==+++++::::..-*++*##+::-=-+=%#::       -*##%#@@@@@@@@@+@%@%@@#-=#**
                @%##*-::--:-:--=+#+++===+++++++=+*++*+#+**%%@%@%@: :==-%%%#@@#@@@@@@@@#@*@%#@@@@@*@@
               *****#@@@@@@@@=    @@@@@%@@@ @%@@@#@@@%@=#%@%@@@@@@%@%#%@##%@#%@#@@@@@#@%@@@@@@:--- =
                   @#@@@@@@@@-   .@%@@@@@@@.@%@@+@@####%##@@@@@@@@#@@@%:=++***##+%*+**#@@%@+++:-@@@*
                   @@@@@@@@@@@%%@=@%@+@@@@*@@%@*@@##%@@@@#@@%@@@%@+=+===+=%+=*-@=:#*=@#@@:-%##%%@@@@
                   @%@@@@@@@@%###=. .%@@@ .....:.::+@#@@@@@@@@%-+:--##*++#%*-#++:=+#@*#=-**+%%#*#%@%
                   @#@@@@@@@@@#@%=@@-*@@@:--*=-=*%@@@@@@@@@+=-==--*+-**=*+#=-.%=+=#++*+--:=*#%@**#@@
                   @#@@@@@@@@@@@@=%@%@@@@*##@%@@@*- .#@@%---#-##:=--%@%##=.*%@*%=@+#*+*#%@@%+*%*@@@%
      -#@%@@@@@@**%%*@@@@@@@##**+=@@@@@@@-#-:=%@@@%@@%+**+%##===++#@#@+-@%*++%%##=@+++#@%=*@%%@%@@@%
      #%=%@@@#@%@@@#*@@@@%+@@@@@*% ...=#*==+##**=#+=*+=%#+%%#@@%##==.+%%+**+###%#-%**@@+*@@@##@*@+@@
  @@@@@@%@%@@##%@@@@@@@@@@@@@*+@@@%@@+@++:=+.:+-#=*=%#@%+##++=@@+:+@*******+###+%%*@@##=@%*@@@+%@@@*
@=--*@%@#%@@@@@@@@@=@@@@@@%@@%=%@#%#%@@@@@@@%+=+#%#++@@%*%%#@@@###=#+##+*+=%@=+%#*@=#@#@+%*@*@@@@##@
@@##@@@@@@@@%@@+:@@@@@@@@@@@@@%@@@@@@@@@#%#@#@@@%%@*@-#%*-#-%**%*+**+***##+=#%**%@@@@%#@*#@*@@@#=%@@`}</pre>
        <div className="light-beam"></div>
      </div>
    </div>
  );
};

================
File: src/components/Lighthouse/Stars.tsx
================
import React, { useEffect, useRef } from 'react';

const Stars: React.FC = () => {
  const canvasRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    class Star {
      private x: number;
      private y: number;
      private radius: number;
      private alpha: number;
      private twinkleSpeed: number;
      private startTime: number;

      constructor(canvasWidth: number, canvasHeight: number) {
        this.x = Math.random() * canvasWidth;
        this.y = Math.random() * canvasHeight;
        this.radius = Math.random() * 2;
        this.alpha = Math.random();
        this.twinkleSpeed = 0.001 + Math.random() * 0.001;
        this.startTime = Date.now();
      }

      draw(context: CanvasRenderingContext2D): void {
        const currentTime = Date.now();
        this.alpha = Math.abs(Math.sin((currentTime - this.startTime) * this.twinkleSpeed));
        
        context.beginPath();
        context.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
        context.fillStyle = `rgba(255, 255, 255, ${this.alpha})`;
        context.fill();
      }
    }

    let stars: Star[] = [];
    let animationFrameId: number;

    // Function to create stars
    const createStars = () => {
      stars = Array.from({ length: 200 }, () => new Star(canvas.width, canvas.height));
    };

    // Set canvas size and create stars
    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      createStars(); // Recreate stars whenever canvas is resized
    };

    // Animation loop
    const animate = () => {
      if (!ctx) return;
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      stars.forEach(star => star.draw(ctx));
      animationFrameId = requestAnimationFrame(animate);
    };

    // Initial setup
    resizeCanvas();
    animate();

    // Add resize listener
    window.addEventListener('resize', resizeCanvas);

    // Cleanup
    return () => {
      window.removeEventListener('resize', resizeCanvas);
      cancelAnimationFrame(animationFrameId);
    };
  }, []);

  return (
    <canvas
      ref={canvasRef}
      className="fixed top-0 left-0 w-full h-full pointer-events-none"
    />
  );
};

export default Stars;

================
File: src/components/Moon/Moon.css
================
.moon-container {
  position: fixed;
  top: 20px;
  left: 20px;
  color: #ffffff;
  font-size: 12px;
  line-height: 1;
  white-space: pre;
  z-index: 20;
  pointer-events: none;
}

.moon-ascii {
  opacity: 0.8;
}

.twinkling-star {
  display: inline-block;
}

.twinkling-star:matches(*) {
  transition: opacity 1.2s ease-in-out;
}

.twinkling-star:matches(o) {
  transition: opacity 1.8s ease-in-out;
}

.twinkling-star:matches(-O-) {
  transition: opacity 2.4s ease-in-out;
}

@media (max-width: 768px) {
  .moon-container {
    display: none;
  }
}

================
File: src/components/Moon/Moon.tsx
================
import { useEffect, useState } from 'react';
import './Moon.css';

export const Moon = () => {
  const [isBlinking, setIsBlinking] = useState(false);
  const [starOpacities, setStarOpacities] = useState<{ [key: string]: { [key: number]: { opacity: number, targetOpacity: number, holdTime: number } } }>({});

  // Handle moon eye blinking
  useEffect(() => {
    const blinkInterval = setInterval(() => {
      setIsBlinking(true);
      setTimeout(() => setIsBlinking(false), 200);
    }, Math.random() * 10000 + 5000);

    return () => clearInterval(blinkInterval);
  }, []);

  // Handle star twinkling
  useEffect(() => {
    const starSymbols = ['*', 'o', '-O-'];
    const initialOpacities: { 
      [key: string]: { 
        [key: number]: { 
          opacity: number, 
          targetOpacity: number,
          holdTime: number 
        } 
      } 
    } = {};
    
    // Initialize opacities for each symbol type
    starSymbols.forEach(symbol => {
      initialOpacities[symbol] = {};
      for (let i = 0; i < 5; i++) {
        initialOpacities[symbol][i] = {
          opacity: Math.random() * 0.5 + 0.5,
          targetOpacity: Math.random() * 0.5 + 0.5,
          holdTime: 0
        };
      }
    });

    setStarOpacities(initialOpacities);

    const twinkleInterval = setInterval(() => {
      setStarOpacities(prev => {
        const newOpacities = { ...prev };
        starSymbols.forEach(symbol => {
          Object.keys(newOpacities[symbol]).forEach(key => {
            const numKey = parseInt(key);
            const star = newOpacities[symbol][numKey];

            // If star is being held at full brightness
            if (star.holdTime > 0) {
              star.holdTime -= 100;
              if (star.holdTime <= 0) {
                // When hold time expires, set new target opacity
                star.targetOpacity = Math.random() * 0.3 + 0.2; // Dim target
              }
              return;
            }

            // Chance to start holding at full brightness
            if (Math.random() < 0.01 && star.opacity < 0.7) { // 1% chance when star is dim
              star.targetOpacity = 1;
              star.holdTime = Math.random() * (
                symbol === '*' ? 2000 : 
                symbol === 'o' ? 4000 : 
                6000
              ) + 2000;
              return;
            }

            // Smoothly transition to target opacity
            const speed = symbol === '*' ? 0.03 : symbol === 'o' ? 0.02 : 0.01;
            if (Math.abs(star.opacity - star.targetOpacity) < 0.05) {
              // Set new target when current target is reached
              star.targetOpacity = Math.random() * 0.5 + 0.5;
            }
            
            // Move opacity towards target
            if (star.opacity < star.targetOpacity) {
              star.opacity += speed;
            } else if (star.opacity > star.targetOpacity) {
              star.opacity -= speed;
            }
            
            // Ensure opacity stays within bounds
            star.opacity = Math.max(0.2, Math.min(1, star.opacity));
          });
        });
        return newOpacities;
      });
    }, 100);

    return () => clearInterval(twinkleInterval);
  }, []);

  const renderAsciiArt = () => {
    const lines = [
      'o                     __...__     *',
      '              *   .--\'    __.=-.             o',
      '     |          ./     .-\'',
      '    -O-        /      /',
      '     |        /    "\'/               *',
      `             |     (${isBlinking ? '●' : '@'})`,
      '            |        \\                         .',
      '            |         \\',
      ' *          |       ___\\                  |',
      '             |  .   /  `                 -O-',
      '              \\  `~~\\                     |',
      '         o     \\     \\            *',
      '                `\\    `-.__           .',
      '    .             `--._    `--\'',
      '                       `---~~`                *',
      '            *                   o'
    ];

    return lines.map((line, index) => {
      // Replace ASCII stars with spans that have opacity animation
      const processedLine = line.replace(/[\*o]|-O-/g, (match, offset) => {
        const symbolCounts: { [key: string]: number } = { '*': 0, 'o': 0, '-O-': 0 };
        const opacity = starOpacities[match]?.[symbolCounts[match] % 5]?.opacity || 1;
        symbolCounts[match]++;
        return `<span class="twinkling-star" style="opacity: ${opacity}">${match}</span>`;
      });

      return <div key={index} dangerouslySetInnerHTML={{ __html: processedLine }} />;
    });
  };

  return (
    <div className="moon-container">
      <pre className="moon-ascii">
        {renderAsciiArt()}
      </pre>
    </div>
  );
};

================
File: src/components/Navigation/NavigationMenu.tsx
================
import { useState } from 'react';
import { Link } from 'react-router-dom';

interface MenuItem {
  name: string;
  path: string;
  children?: MenuItem[];
}

const menuData: MenuItem = {
  name: 'me.jamino',
  path: '/',
  children: [
    { name: 'Beautiful-NTD', path: '/transit-database' },
    {
      name: 'Minecraft-Mods',
      path: '/minecraft-mods',
      children: [
        { name: 'Wynn-Weapon-Bigger', path: '/minecraft-mods/wynn-weapon-bigger' },
        { name: 'WynnVista', path: '/minecraft-mods/wynnvista' },
        { name: 'WynnLODGrabber', path: '/minecraft-mods/wynnlodgrabber' },
        { name: 'WynnBubbles', path: '/minecraft-mods/wynnbubbles' },
        { name: 'Class-Keybind-Profiles', path: '/minecraft-mods/class-keybind-profiles' },
        { name: 'Nimble-ReWynnded', path: '/minecraft-mods/nimble-rewynnded' }
      ]
    },
    {
      name: 'Photos',
      path: '/photos',
      children: [
        { name: 'National-Parks', path: '/photos/national-parks' },
        { name: 'American-South', path: '/photos/american-south' },
        { name: 'Misc', path: '/photos/misc' }
      ]
    },
    { name: 'Thunderegg-Records', path: 'https://www.thundereggrecords.com/' },
    { name: 'Biznes-Card', path: '/biznes-card' }
  ]
};

const NavigationItem = ({ 
  item, 
  level = 0, 
  isLastChild = false 
}: { 
  item: MenuItem; 
  level?: number;
  isLastChild?: boolean;
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [visited, setVisited] = useState(false);

  const handleClick = () => {
    if (item.children) {
      setIsOpen(!isOpen);
    }
    setVisited(true);
  };

  return (
    <div className="relative">
      <div className="flex items-center h-8">
        <div className="flex items-center">
          {level > 0 && (
            <>
              {Array.from({ length: level - 1 }).map((_, i) => (
                <div
                  key={i}
                  className="w-6 h-8 flex items-center justify-center"
                >
                  <div className="w-[1px] h-full bg-white"/>
                </div>
              ))}
              <div className="w-6 h-8 flex items-center justify-center text-white">
                {isLastChild ? '└' : '├'}
              </div>
              <div className="w-3 h-8 flex items-center justify-center text-white">
                ──
              </div>
            </>
          )}
          <div 
            className={`flex items-center cursor-pointer ${level === 0 ? 'pl-1' : 'pl-0'}`}
            onClick={handleClick}
          >
            <span className="mr-2 text-base">
              {item.children ? (isOpen ? '📂' : '📁') : '📄'}
            </span>
            {item.children && level === 0 ? (
              <Link 
                to={item.path}
                className={`font-['IBM_Plex_Mono'] hover:text-blue-400 ${visited ? 'text-blue-400' : 'text-white'} ${level === 0 ? 'text-2xl' : 'text-base'}`}
              >
                {item.name}
              </Link>
            ) : item.children ? (
              <span 
                className={`font-['IBM_Plex_Mono'] hover:text-blue-400 ${visited ? 'text-blue-400' : 'text-white'} ${level === 0 ? 'text-xl' : 'text-base'}`}
              >
                {item.name}
              </span>
            ) : item.path.startsWith('http') ? (
              <a 
                href={item.path}
                target="_blank"
                rel="noopener noreferrer"
                className={`font-['IBM_Plex_Mono'] hover:text-blue-400 ${visited ? 'text-blue-400' : 'text-white'} text-base`}
              >
                {item.name}
              </a>
            ) : (
              <Link 
                to={item.path} 
                className={`font-['IBM_Plex_Mono'] hover:text-blue-400 ${visited ? 'text-blue-400' : 'text-white'} text-base`}
              >
                {item.name}
              </Link>
            )}
          </div>
        </div>
      </div>
      
      {isOpen && item.children && (
        <div className="relative">
          {item.children.map((child, index) => (
            <NavigationItem 
              key={child.path} 
              item={child} 
              level={level + 1}
              isLastChild={index === item.children!.length - 1}
            />
          ))}
        </div>
      )}
    </div>
  );
};

export const NavigationMenu = () => {
  return (
    <div className="font-['IBM_Plex_Mono'] pl-2">
      <NavigationItem item={menuData} />
    </div>
  );
};

================
File: src/components/NowPlaying/NowPlaying.tsx
================
import { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import Marquee from 'react-fast-marquee';

interface Track {
  name: string;
  artist: string;
}

const LASTFM_API_KEY = process.env.REACT_APP_LASTFM_API_KEY;
const LASTFM_USERNAME = 'bob10234';

export const NowPlaying = () => {
  const [lastTrack, setLastTrack] = useState<Track | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchLastTrack = async () => {
      try {
        const response = await fetch(
          `https://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&user=${LASTFM_USERNAME}&api_key=${LASTFM_API_KEY}&format=json&limit=1`
        );
        
        if (!response.ok) throw new Error('Failed to fetch');
        
        const data = await response.json();
        const track = data.recenttracks.track[0];
        
        setLastTrack({
          name: track.name,
          artist: track.artist['#text']
        });
      } catch (err) {
        setError('Failed to load track info');
        console.error('LastFM Error:', err);
      }
    };

    fetchLastTrack();
    const interval = setInterval(fetchLastTrack, 30000);

    return () => clearInterval(interval);
  }, []);

  const trackText = lastTrack ? `[${lastTrack.name} - ${lastTrack.artist}]` : '';

  return (
    <Link 
      to="/jam"
      className="fixed top-4 right-4 z-[100] bg-white/10 backdrop-blur-sm text-white font-['IBM_Plex_Mono'] 
        hover:bg-white/20 transition-all duration-300 rounded-lg overflow-hidden border border-white/20"
    >
      <div className="px-6 py-3">
        <div className="flex flex-col items-end gap-y-1">
          <div className="text-sm opacity-70">Jam JUST listened to</div>
          <div className="overflow-hidden relative w-[200px]">
            {error ? (
              <span className="text-red-400">Failed to load track info</span>
            ) : !lastTrack ? (
              <span>Loading...</span>
            ) : (
              <Marquee gradient={false} speed={50}>
                {trackText}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              </Marquee>
            )}
          </div>
        </div>
      </div>
    </Link>
  );
};

================
File: src/components/Water/Water.css
================
.water-container {
    position: fixed;
    bottom: 0;
    left: 0;
    height: 40px;
    overflow: hidden;
    z-index: 5;
  }
  
  .water-animation {
    color: rgba(100, 149, 237, 0.5);
    font-size: 14px;
    line-height: 1.2;
    white-space: pre;
  }
  
  .wave-1 {
    animation: waveMotion1 8s linear infinite,
               waveFloat1 3s ease-in-out infinite;
  }
  
  .wave-2 {
    animation: waveMotion2 8s linear infinite,
               waveFloat2 3s ease-in-out infinite;
  }
  
  /* First wave animations */
  @keyframes waveMotion1 {
    0% {
      transform: translateX(0%);
    }
    100% {
      transform: translateX(-50%);
    }
  }
  
  @keyframes waveFloat1 {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(4px);
    }
  }
  
  /* Second wave animations (slightly offset) */
  @keyframes waveMotion2 {
    0% {
      transform: translateX(-50%);
    }
    100% {
      transform: translateX(0%);
    }
  }
  
  @keyframes waveFloat2 {
    0%, 100% {
      transform: translateY(4px);
    }
    50% {
      transform: translateY(0);
    }
  }

================
File: src/components/Water/Water.tsx
================
import { useEffect, useState } from 'react';
import './Water.css';

export const Water = () => {
  const [width, setWidth] = useState(window.innerWidth);
  
  useEffect(() => {
    const handleResize = () => {
      setWidth(window.innerWidth);
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const waterWidth = width - 500;
  
  // More detailed wave patterns that cycle through animation
  const wavePatterns = [
    "._.-._.-.,.-~^~-.,_,.-~^~-.,_,.-~^~-.,_,.-~^~-.,_,.-~^~-.,",
    "._.-._.--~^~-.,_,.-~^~-.,_,.-~^~-.,_,.-~^~-.,_,.-~^~-.,_,"
  ];

  return (
    <div className="water-container">
      <pre className="water-animation" style={{ width: `${waterWidth}px` }}>
        {wavePatterns.map((pattern, index) => (
          <div key={index} className={`wave-line wave-${index + 1}`}>
            {pattern.repeat(6)}
          </div>
        ))}
      </pre>
    </div>
  );
};

================
File: src/config/mods.ts
================
export interface ModConfig {
    id: string;
    title: string;
    description: string;
    iconUrl: string;
    githubUrl: string;
    modrinthUrl: string;
    curseforgeUrl: string;
    readmeUrl: string;
  }
  
  export const mods: Record<string, ModConfig> = {
    'wynn-weapon-bigger': {
      id: 'wynn-weapon-bigger',
      title: 'Wynncraft Weapon Bigger',
      description: 'I make your weapon big, duh. A fork of Big Items, Duh designed to only show Wynncraft gear and updated to 1.21.',
      iconUrl: 'https://raw.githubusercontent.com/DrBiznes/WynnWeaponViewer/master/src/main/resources/assets/wynn_weapon_viewer/icon.png',
      githubUrl: 'https://github.com/DrBiznes/WynnWeaponViewer',
      modrinthUrl: 'https://modrinth.com/mod/wynnweaponbigger',
      curseforgeUrl: 'https://www.curseforge.com/minecraft/mc-mods/wynn-weapon-bigger',
      readmeUrl: 'https://raw.githubusercontent.com/DrBiznes/WynnWeaponViewer/master/README.md'
    },
    'wynnlodgrabber': {
      id: 'wynnlodgrabber',
      title: 'WynnLODGrabber',
      description: 'Automatically download the Distant Horizons LODs for Wynncraft',
      iconUrl: 'https://raw.githubusercontent.com/DrBiznes/WynnLODGrabber/master/src/main/resources/assets/wynnlodgrabber/icon.png',
      githubUrl: 'https://github.com/DrBiznes/WynnLODGrabber',
      modrinthUrl: 'https://modrinth.com/mod/wynnlodgrabber',
      curseforgeUrl: 'https://www.curseforge.com/minecraft/mc-mods/wynnlodgrabber',
      readmeUrl: 'https://raw.githubusercontent.com/DrBiznes/WynnLODGrabber/master/README.md'
    },
    'wynnvista': {
      id: 'wynnvista',
      title: 'WynnVista',
      description: 'Automagically adjusts Distant Horizons render distance when outside the Wynncraft map.',
      iconUrl: 'https://raw.githubusercontent.com/DrBiznes/WynnVista/master/src/main/resources/wynnvista/icon.png',
      githubUrl: 'https://github.com/DrBiznes/WynnVista',
      modrinthUrl: 'https://modrinth.com/mod/wynnvista',
      curseforgeUrl: 'https://www.curseforge.com/minecraft/mc-mods/wynnvista',
      readmeUrl: 'https://raw.githubusercontent.com/DrBiznes/WynnVista/master/README.md'
    },
    'wynnbubbles': {
      id: 'wynnbubbles',
      title: 'WynnBubbles',
      description: 'Wynncraft chat floats above players\' heads and changes colors for party, guild, and private chat.',
      iconUrl: 'https://raw.githubusercontent.com/DrBiznes/WynnBubbles/main/src/main/resources/assets/wynnbubbles/icon.png',
      githubUrl: 'https://github.com/DrBiznes/WynnBubbles',
      modrinthUrl: 'https://modrinth.com/mod/wynnbubbles',
      curseforgeUrl: 'https://www.curseforge.com/minecraft/mc-mods/wynnbubbles',
      readmeUrl: 'https://raw.githubusercontent.com/DrBiznes/WynnBubbles/main/README.md'
    },
    'class-keybind-profiles': {
      id: 'class-keybind-profiles',
      title: 'Class Keybind Profiles',
      description: 'Automatically switches between presaved keybind profiles for Wynncraft classes.',
      iconUrl: 'https://raw.githubusercontent.com/DrBiznes/Class-Keybind-Profiles/master/src/main/resources/assets/classkeybindprofiles/icon.png',
      githubUrl: 'https://github.com/DrBiznes/Class-Keybind-Profiles',
      modrinthUrl: 'https://modrinth.com/mod/class-keybind-profiles',
      curseforgeUrl: 'https://www.curseforge.com/minecraft/mc-mods/class-keybind-profiles',
      readmeUrl: 'https://raw.githubusercontent.com/DrBiznes/Class-Keybind-Profiles/master/README.md'
    },
    'nimble-rewynnded': {
      id: 'nimble-rewynnded',
      title: 'Nimble ReWynnded',
      description: 'Wynncraft-specific camera utilities, inspired by the mod Nimble.',
      iconUrl: 'https://raw.githubusercontent.com/DrBiznes/Nimble-ReWynnded/master/src/main/resources/assets/nimblerewynnded/icon.png',
      githubUrl: 'https://github.com/DrBiznes/Nimble-ReWynnded',
      modrinthUrl: 'https://modrinth.com/mod/nimble-rewynnded',
      curseforgeUrl: 'https://www.curseforge.com/minecraft/mc-mods/nimble-rewynnded',
      readmeUrl: 'https://raw.githubusercontent.com/DrBiznes/Nimble-ReWynnded/master/README.md'
    }
  };

================
File: src/config/photos.ts
================
export interface PhotoItem {
  imageUrl: string;
  title: string;
  description?: string;
  type?: 'image' | 'video';
  thumbnailUrl?: string;
}

interface PhotoSet {
  id: string;
  title: string;
  description: string;
  folderId: string;
  photos: PhotoItem[];
  allPhotos: PhotoItem[];
}

interface PhotoGallery {
  id: string;
  title: string;
  description: string;
  photoSets: PhotoSet[];
}

export const photoGalleries: Record<string, PhotoGallery> = {
  'national-parks': {
    id: 'national-parks',
    title: 'National Parks',
    description: 'A collection of photographs from various National Parks across the United States',
    photoSets: [
      {
        id: 'katmai',
        folderId: 'national-parks/katmai',
        title: 'Katmai National Park',
        description: 'Very first time entering the lottery for Katmai and we got in. We were so excited. We had no idea what we were getting into. We were not prepared for the bears. We were not prepared for the bears. We were not prepared for the bears.',
        photos: [
          {
            imageUrl: '/photos/national-parks/katmai/NobleBear.JPEG',
            title: 'Noble Bear',
            description: 'Noble bear is a big bear. He is a good bear. He is a noble bear. Look at him stand on that rock.'
          },
          {
            imageUrl: '/photos/national-parks/katmai/Iditarod.JPEG',
            title: 'Iditarod',
            description: 'This was us on our way to the airport.'
          },
          {
            imageUrl: '/photos/national-parks/katmai/BackwardBear.JPEG',
            title: 'Backwards Bear',
            description: 'Stupid idiot bear doesn\'t realize he\'s facing the wrong way. The fish are on the other side dummy.'
          },
          {
            imageUrl: '/photos/national-parks/katmai/TenThousandSmokes.JPEG',
            title: 'Ten Thousand Smokes',
            description: 'Hands down the coolest name for a valley, shoutout to the Sugpiaq people.'
          }
        ],
        allPhotos: [
          {
            imageUrl: '/photos/national-parks/katmai/NobleBear.JPEG',
            type: 'image',
            title: 'Noble Bear',
            description: 'Noble bear is a big bear. He is a good bear. He is a noble bear. Look at him stand on that rock.'
          },
          {
            imageUrl: '/photos/national-parks/katmai/Iditarod.JPEG',
            type: 'image',
            title: 'Iditarod',
            description: 'A tranquil lake reflecting the surrounding mountains'
          },
          {
            imageUrl: '/photos/national-parks/katmai/BackwardBear.JPEG',
            type: 'image',
            title: 'Backward Bear',
            description: 'Stupid idiot bear doesn\'t realize he\'s facing the wrong way. The fish are on the other side dummy.'
          },
          {
            imageUrl: '/photos/national-parks/katmai/TenThousandSmokes.JPEG',
            type: 'image',
            title: 'Ten Thousand Smokes',
            description: 'A breathtaking sunset over the rugged landscape'
          },
          {
            imageUrl: '/photos/national-parks/katmai/CoolestNameForAValley.JPEG',
            type: 'image',
            title: 'Coolest Name For a Valley',
          },
          {
            imageUrl: '/photos/national-parks/katmai/JerryBruckheimerTree.JPEG',
            type: 'image',
            title: 'Jerry Bruckheimer Tree',
          },
          {
            imageUrl: '/photos/national-parks/katmai/NoSuddenMovesOne.JPEG',
            type: 'image',
            title: 'No Sudden Moves One',
          },
          {
            imageUrl: '/photos/national-parks/katmai/NoSuddenMovesTwo.MP4',
            type: 'video',
            title: 'No Sudden Moves Two',
            thumbnailUrl: '/photos/national-parks/katmai/NoSuddenMovesOne.JPEG'
          },
          {
            imageUrl: '/photos/national-parks/katmai/NobleBear.JPEG',
            type: 'image',
            title: 'Noble Bear',
          },
          {
            imageUrl: '/photos/national-parks/katmai/TenthousandSmokes.JPEG',
            type: 'image',
            title: 'Ten Thousand Smokes',
          },
          {
            imageUrl: '/photos/national-parks/katmai/TheShow.JPEG',
            type: 'image',
            title: 'The Show',
          },
          {
            imageUrl: '/photos/national-parks/katmai/WadingBear.JPEG',
            type: 'image',
            title: 'Wading Bear',
          },
          {
            imageUrl: '/photos/national-parks/katmai/a-Short-Hike.JPEG',
            type: 'image',
            title: 'A Short Hike',
          },
        ]        
      },
      {
        id: 'yosemite-summer-2024',
        folderId: 'national-parks/yosemite/summer-2024',
        title: 'Yosemite Summer 2024',
        description: 'Anytime I suggested doing a hike more than 5 miles they said I aint doin all that.',
        photos: [
          {
            imageUrl: '/photos/national-parks/yosemite/summer-2024/JustEnoughMist.JPEG',
            title: 'Just Enough Mist',
            description: 'Just enough mist for our own personal rainbow.'
          },
          {
            imageUrl: '/photos/national-parks/yosemite/summer-2024/Dome-pinch.JPEG',
            title: 'Dome Pinch',
            description: 'He tried to squish Half Dome between his fingers. How original.'
          },
          {
            imageUrl: '/photos/national-parks/yosemite/summer-2024/CathedralLakeLoop.JPEG',
            title: 'Cathedral Lake Loop',
            description: 'Had the whole lake to ourselves. I saw a family of deer on the way out. They were so cute!!!'
          },
          {
            imageUrl: '/photos/national-parks/yosemite/summer-2024/InAwe.JPEG',
            title: 'In Awe',
            description: 'Vernal falls never disappoints. Except for the day we went.'
          }
        ],
        allPhotos: [
          {
            imageUrl: '/photos/national-parks/yosemite/summer-2024/CathedralLakeLoop.JPEG',
            type: 'image',
            title: 'Cathedral Lake Loop',
            description: 'Had the whole lake to ourselves. I saw a family of deer on the way out. They were so cute!!!'
          },
          {
            imageUrl: '/photos/national-parks/yosemite/summer-2024/JustEnoughMist.JPEG',
            type: 'image',
            title: 'Just Enough Mist',
            description: 'Just enough mist for our own personal rainbow.'
          },
          {
            imageUrl: '/photos/national-parks/yosemite/summer-2024/Dome-pinch.JPEG',
            type: 'image',
            title: 'Dome Pinch',
            description: 'He tried to squish Half Dome between his fingers. How original.'
          },
          {
            imageUrl: '/photos/national-parks/yosemite/summer-2024/InAwe.JPEG',
            type: 'image',
            title: 'In Awe',
            description: 'Vernal falls never disappoints. Except for the day we went.'
          },
          {
            imageUrl: '/photos/national-parks/yosemite/summer-2024/EveningDome.JPEG',
            type: 'image',
            title: 'Evening Dome',
          },
          {
            imageUrl: '/photos/national-parks/yosemite/summer-2024/TenayaValley.JPEG',
            type: 'image',
            title: 'Above Tenaya',
          },
          {
            imageUrl: '/photos/national-parks/yosemite/summer-2024/TreePinch.JPEG',
            type: 'image',
            title: 'Tree Pinch',
          }
        ]        
      },
      {
        id: 'yosemite-winter-2023',
        folderId: 'national-parks/yosemite/winter-2023',
        title: 'Yosemite Winter 2023',
        description: 'My whole life I\'ve wanted to see Yosemite covered in snow. Well, I finally go in the winter and the snow melts one day after we get there. I guess I\'ll just have to go back again.',
        photos: [
          {
            imageUrl: '/photos/national-parks/yosemite/winter-2023/FilledMyBottle.JPG',
            title: 'Filled My Bottle',
            description: 'Dipped my water bottle in the creek to fill it up. The ranger told me if I drank it, I would die. I did not listen.'
          },
          {
            imageUrl: '/photos/national-parks/yosemite/winter-2023/Pohono.JPEG',
            title: 'Pohono',
            description: 'Pohono mean Spirit of the puffing wind. The wind bellows and roars against Bridalveil Falls so much that the waterfall sometimes flows up.'
          },
          {
            imageUrl: '/photos/national-parks/yosemite/winter-2023/WorstPhotoScanEver.JPG',
            title: 'Worst Photo Scan Ever',
            description: 'Good luck trying to figure out where this is Georainbolt'
          },
          {
            imageUrl: '/photos/national-parks/yosemite/winter-2023/upper-falls.JPEG',
            title: 'Upper Falls',
            description: 'Only a tiny trickle of water flowing down upper Yosemite Falls :('
          }
        ],
        allPhotos: [
          {
            "imageUrl": "/photos/national-parks/yosemite/winter-2023/FilledMyBottle.JPG",
            "type": "image",
            "title": "Filled My Bottle",
            "description": "Dipped my water bottle in the creek to fill it up. The ranger told me if I drank it, I would die. I did not listen."
          },
          {
            "imageUrl": "/photos/national-parks/yosemite/winter-2023/Pohono.JPEG",
            "type": "image",
            "title": "Pohono",
            "description": "Pohono mean Spirit of the puffing wind. The wind bellows and roars against Bridalveil Falls so much that the waterfall sometimes flows up."
          },
          {
            "imageUrl": "/photos/national-parks/yosemite/winter-2023/WorstPhotoScanEver.JPG",
            "type": "image",
            "title": "Worst Photo Scan Ever",
            "description": "Good luck trying to figure out where this is Georainbolt"
          },
          {
            "imageUrl": "/photos/national-parks/yosemite/winter-2023/upper-falls.JPEG",
            "type": "image",
            "title": "Upper Falls",
            "description": "Only a tiny trickle of water flowing down upper Yosemite Falls :("
          },
          {
            "imageUrl": "/photos/national-parks/yosemite/winter-2023/LookAtTheDummyInTheBerryHat.jpg",
            "type": "image",
            "title": "Look At The Dummy In The Berry Hat",
          },
          {
            "imageUrl": "/photos/national-parks/yosemite/winter-2023/PuffingWind.JPG",
            "type": "image",
            "title": "Puffing Wind",
          },
          {
            "imageUrl": "/photos/national-parks/yosemite/winter-2023/distant-falls.JPEG",
            "type": "image",
            "title": "Distant Falls",
          },
          {
            "imageUrl": "/photos/national-parks/yosemite/winter-2023/secunda.JPEG",
            "type": "image",
            "title": "Secunda",
          },
          {
            "imageUrl": "/photos/national-parks/yosemite/winter-2023/skyFalling.JPG",
            "type": "image",
            "title": "Sky Falling",
          },
        ]        
      }
    ]
  },
  'american-south': {
    id: 'american-south',
    title: 'American South',
    description: 'Exploring the culture and beauty of the American South',
    photoSets: [
      {
        id: 'new-orleans',
        folderId: 'american-south/new-orleans',
        title: 'New Orleans',
        description: 'The most culturally rich city in America. The food is amazing. The people are amazing. The music is amazing. The history is amazing. The architecture is amazing. The weather is horrible. The food is amazing.',
        photos: [
          {
            imageUrl: '/photos/american-south/new-orleans/BoilNotice.JPEG',
            title: 'Boil Notice',
            description: 'Like ten days after we ate at this place, they had to reset the boil notice board.'
          },
          {
            imageUrl: '/photos/american-south/new-orleans/I-Am-Loved.JPEG',
            title: 'I Am Loved',
            description: '@CEEDAMESSENGER is the greatest messenger and poet in the world please keep grafiting the sidewalks of new orleans'
          },
          {
            imageUrl: '/photos/american-south/new-orleans/WW2-Museum-Soldier-Sketch.JPEG',
            title: 'WW2 Museum Soldier Sketch',
            description: 'I visit the WWII museum every time I go to New Orleans, but the doctors say I\'m not autistic.'
          },
          {
            imageUrl: '/photos/american-south/new-orleans/AudubonButterfly.JPEG',
            title: 'Audubon Butterfly',
            description: 'I\'m not sure if this is a butterfly or a moth. I\'m not a scientist.'
          }
        ],
        allPhotos: [
          {
            "imageUrl": "/photos/american-south/new-orleans/BoilNotice.JPEG",
            "type": "image",
            "title": "Boil Notice",
            "description": "Like ten days after we ate at this place, they had to reset the boil notice board."
          },
          {
            "imageUrl": "/photos/american-south/new-orleans/I-Am-Loved.JPEG",
            "type": "image",
            "title": "I Am Loved",
            "description": "@CEEDAMESSENGER is the greatest messenger and poet in the world please keep grafiting the sidewalks of new orleans"
          },
          {
            "imageUrl": "/photos/american-south/new-orleans/WW2-Museum-Soldier-Sketch.JPEG",
            "type": "image",
            "title": "WW2 Museum Soldier Sketch",
            "description": "I visit the WWII museum every time I go to New Orleans, but the doctors say I'm not allowed to remember anything."
          },
          {
            "imageUrl": "/photos/american-south/new-orleans/AudubonButterfly.JPEG",
            "type": "image",
            "title": "Audubon Butterfly",
            "description": "I'm not sure if this is a butterfly or a moth. I'm not a scientist."
          },
          {
            "imageUrl": "/photos/american-south/new-orleans/I-Am-Funny.JPEG",
            "type": "image",
            "title": "I Am Funny",
          },
          {
            "imageUrl": "/photos/american-south/new-orleans/I-Am-Strong.JPEG",
            "type": "image",
            "title": "I Am Strong",
          },
          {
            "imageUrl": "/photos/american-south/new-orleans/I-AmBeautifulInsideAndOut.JPEG",
            "type": "image",
            "title": "I Am Beautiful Inside And Out",
          },
          {
            "imageUrl": "/photos/american-south/new-orleans/I-Rise-I-Rise-I-Rise.JPEG",
            "type": "image",
            "title": "I Rise I Rise I Rise",
          },
          {
            "imageUrl": "/photos/american-south/new-orleans/LayersOfClouds.JPEG",
            "type": "image",
            "title": "Layers Of Clouds",
          },
          {
            "imageUrl": "/photos/american-south/new-orleans/Jellyfish.JPG",
            "type": "image",
            "title": "Jellyfish",
          }
        ]        
      },
      {
        id: 'saint-francisville',
        folderId: 'american-south/saint-francisville',
        title: 'Saint Francisville',
        description: 'This is where my grandma lives, and my mom grew up. There sure are a lot of plantations nearby, but don\'t worry, we don\'t live on one.',
        photos: [
          {
            imageUrl: '/photos/american-south/saint-francisville/BackyardSunset.JPG',
            title: 'Backyard Sunset',
            description: 'Everyone always talks about the Los Angeles sunsets but LA sunsets are better.'
          },
          {
            imageUrl: '/photos/american-south/saint-francisville/GrandmasGator.JPEG',
            title: 'Grandmas Gator',
            description: 'This little guy lives in the pond behind grandma\'s house.'
          },
          {
            imageUrl: '/photos/american-south/saint-francisville/GrandmasSwing.jpeg',
            title: 'Grandmas Swing',
            description: 'Having a porch with a swing is the american dream.'
          },
          {
            imageUrl: '/photos/american-south/saint-francisville/OrbWeaverOne.JPEG',
            title: 'Orb Weaver',
            description: 'Armies of orb weavers surround the forests of Saint Francisville. I am terrified but they are beautiful.'
          }
        ],
        allPhotos: [
          {
            imageUrl: '/photos/american-south/saint-francisville/BackyardSunset.JPG',
            type: 'image',
            title: 'Backyard Sunset',
            description: 'Everyone always talks about the Los Angeles sunsets but LA sunsets are better.'
          },
          {
            imageUrl: '/photos/american-south/saint-francisville/GrandmasGator.JPEG',
            type: 'image',
            title: 'Grandmas Gator',
            description: 'This little guy lives in the pond behind grandma\'s house.'
          },
          {
            imageUrl: '/photos/american-south/saint-francisville/GrandmasSwing.jpeg',
            type: 'image',
            title: 'Grandmas Swing',
            description: 'Having a porch with a swing is the american dream.'
          },
          {
            imageUrl: '/photos/american-south/saint-francisville/OrbWeaverOne.JPEG',
            type: 'image',
            title: 'Orb Weaver One',
            description: 'Armies of orb weavers surround the forests of Saint Francisville. I am terrified but they are beautiful.'
          },
          {
            imageUrl: '/photos/american-south/saint-francisville/OrbWeaver.mp4',
            type: 'video',
            title: 'Orb Weaver',
            thumbnailUrl: '/photos/american-south/saint-francisville/OrbWeaverOne.JPEG'
          },
          {
            imageUrl: '/photos/american-south/saint-francisville/OrbWeaverTwo.JPEG',
            type: 'image',
            title: 'Orb Weaver Two',
          }
        ]        
      }
    ]
  }
};

/*
  To expand the gallery using the four-photo system:
  1. Add a new PhotoSet object to the `photoSets` array within the desired gallery.
  2. Each PhotoSet should contain:
     - A `title` for the set
     - A `description` for the set
     - A `folderId` to identify the complete photo collection
     - An array of `photos` for the preview (exactly 4 photos)
     - An array of `allPhotos` containing all photos for the gallery view
  3. Each photo (in both arrays) must have:
     - `imageUrl`: Path to the image
     - `title`: Title of the photo
     - `description`: Description of the photo
  4. The `photos` array must contain exactly four photos for consistent layout
  5. The `allPhotos` array can contain any number of photos and is used by the gallery view
  6. Add additional galleries by creating new entries in the `photoGalleries` object
  
  Photo Array Usage:
  - `photos`: Used for the preview grid on the main photos page (must be exactly 4 photos)
  - `allPhotos`: Used for the full-screen gallery view, can contain all photos in the set
    including ones not shown in the preview. This allows for a larger collection to be
    viewed in the gallery while maintaining a consistent preview layout.

  To add multiple photo sets to one page:
  - Simply add multiple PhotoSet objects to the `photoSets` array
  - Each set will be displayed vertically on the page in the order they appear in the array
  Example:
    photoSets: [
      { first set of 4 photos... },
      { second set of 4 photos... },
      { third set of 4 photos... }
    ]
*/

================
File: src/hooks/useReadme.ts
================
import { useState, useEffect } from 'react';

export const useReadme = (readmeUrl: string) => {
  const [readme, setReadme] = useState<string>('');
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetch(readmeUrl)
      .then(res => res.text())
      .then(text => {
        setReadme(text);
        setIsLoading(false);
      })
      .catch(err => {
        setError(err.message);
        setIsLoading(false);
      });
  }, [readmeUrl]);

  return { readme, isLoading, error };
};

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: black;
}

/* Hide scrollbar for Chrome, Safari and Opera */
::-webkit-scrollbar {
  display: none;
}

/* Hide scrollbar for IE, Edge and Firefox */
* {
  -ms-overflow-style: none;  /* IE and Edge */
  scrollbar-width: none;  /* Firefox */
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

.no-scroll {
  overflow: hidden;
  height: 100vh;
  position: fixed;
  width: 100%;
}

================
File: src/index.tsx
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import emailjs from '@emailjs/browser';

emailjs.init('DFA3thP5-HZdnQOEV');

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================
File: src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: src/pages/BiznesCard.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { Water } from '../components/Water/Water';
import { Link } from 'react-router-dom';

const ASCII = {
  topLeft: '┌',
  topRight: '┐',
  bottomLeft: '└',
  bottomRight: '┘',
  horizontal: '─',
  vertical: '│',
  teeRight: '├',
  teeLeft: '┤'
};

const BORDER = {
  topLeft: '╔',
  topRight: '╗',
  bottomLeft: '╚',
  bottomRight: '╝',
  horizontal: '═',
  vertical: '║'
};

interface SocialLink {
  platform: string;
  url: string;
}

const socialLinks: SocialLink[] = [
  { platform: 'GitHub', url: 'https://github.com/DrBiznes' },
  { platform: 'Twitter', url: 'https://twitter.com/DrBiznez' },
  { platform: 'LinkedIn', url: 'https://www.linkedin.com/in/jamesfemino/' },
  { platform: 'Discord', url: 'https://discord.gg/jqFF64rXZZ' },
  { platform: 'Email', url: '/email' }
];

const drawBox = (title: string, content: string[]) => {
  const maxWidth = 60;
  const processedContents: string[] = [];
  
  content.forEach((line) => {
    processedContents.push(line);
  });

  const contentWidth = maxWidth + 4;
  
  const drawLine = (start: string, middle: string, end: string) => {
    return `${start}${middle.repeat(contentWidth)}${end}`;
  };

  const drawContentLine = (content: string) => {
    return `${ASCII.vertical} ${content.padEnd(contentWidth - 2)} ${ASCII.vertical}`;
  };

  return [
    drawLine(ASCII.topLeft, ASCII.horizontal, ASCII.topRight),
    drawContentLine(title),
    drawLine(ASCII.teeRight, ASCII.horizontal, ASCII.teeLeft),
    ...processedContents.map(content => drawContentLine(content)),
    drawLine(ASCII.bottomLeft, ASCII.horizontal, ASCII.bottomRight)
  ].join('\n');
};

const drawBusinessCard = (content: string[]) => {
  const width = 76;
  
  const topLine = `${BORDER.topLeft}${BORDER.horizontal.repeat(width)}${BORDER.topRight}`;
  const bottomLine = `${BORDER.bottomLeft}${BORDER.horizontal.repeat(width)}${BORDER.bottomRight}`;

  return (
    <div className="font-mono">
      <pre>{topLine}</pre>
      {content.map((line, i) => (
        <pre key={i}>
          {BORDER.vertical} {line.padEnd(width - 2)} {BORDER.vertical}
        </pre>
      ))}
      <pre>{bottomLine}</pre>
    </div>
  );
};

export const BiznesCard = () => {
  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="min-h-screen w-full flex flex-col items-center justify-center font-mono text-white relative"
    >
      <div className="flex flex-col items-center space-y-8 p-8">
        {/* Business card with double-line border */}
        <div className="whitespace-pre text-left w-[800px]">
          {drawBusinessCard([
            '  $$$$$$$$\\ $$$$$$$\\                    James P. Femino',
            '  \\__$$  __|$$  __$$\\                   Treasurer',
            '     $$ |   $$ |  $$ |',
            '     $$ |   $$$$$$$  |',
            '     $$ |   $$  __$$<                   Thunderegg Records, Non Profit',
            '     $$ |   $$ |  $$ |                  Eugene, Oregon',
            '     $$ |   $$ |  $$ |',
            '     \\__|   \\__|  \\__|         One of the worlds top 3 problem solvers'
          ])}
        </div>

        {/* Original ASCII box replaced with new About section */}
        <div className="whitespace-pre text-left w-[500px]">
          <pre>
            {drawBox('About', [
              'I\'m currently a senior pursuing a B.S in Public',
              'Policy Planning and Management at The University of',
              'Oregon with a minor in Sustainable Business.',
              '',
              'I barely know anything about technology, I just',
              'make this stuff as a hobby. My main interest is',
              'trains...',
              '',
              'Like seriously, trains are my thing. I\'ll stay up',
              'for 50 hours straight learning about locomotives',
              'which is probably why I\'m one of the top 3 problem solvers.'
            ])}
          </pre>
        </div>

        <div className="flex flex-wrap justify-center gap-3 w-full mt-4">
          {socialLinks.map(link => (
            link.platform === 'Email' ? (
              <Link
                key={link.platform}
                to={link.url}
                className="px-3 py-1 border border-white hover:bg-white/10 transition-colors"
              >
                [{link.platform}]
              </Link>
            ) : (
              <a
                key={link.platform}
                href={link.url}
                target="_blank"
                rel="noopener noreferrer"
                className="px-3 py-1 border border-white hover:bg-white/10 transition-colors"
              >
                [{link.platform}]
              </a>
            )
          ))}
        </div>
      </div>
      <Water />
    </motion.div>
  );
};

export default BiznesCard;

================
File: src/pages/EmailPage.tsx
================
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import emailjs from '@emailjs/browser';
import { Water } from '../components/Water/Water';

const ASCII = {
  topLeft: '┌',
  topRight: '┐',
  bottomLeft: '└',
  bottomRight: '┘',
  horizontal: '─',
  vertical: '│',
};

type FormField = 'name' | 'email' | 'subject' | 'message';

export const EmailPage = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    subject: '',
    message: '',
  });
  const [status, setStatus] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate all required fields
    if (!formData.name.trim() || !formData.email.trim() || 
        !formData.subject.trim() || !formData.message.trim()) {
      setStatus('Please fill out all fields');
      return;
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(formData.email)) {
      setStatus('Please enter a valid email address');
      return;
    }

    setStatus('Sending...');

    emailjs.send(
      'service_cp2p2ra',
      'template_k6p959k',
      {
        from_name: formData.name,
        reply_to: formData.email,
        subject: formData.subject,
        message: formData.message,
      },
      'DFA3thP5-HZdnQOEV'
    )
      .then(() => {
        setStatus('Message sent successfully!');
        setFormData({ name: '', email: '', subject: '', message: '' });
      })
      .catch(() => {
        setStatus('Failed to send message. Please try again.');
      });
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="min-h-screen w-full flex flex-col items-center pt-20 font-mono text-white relative"
    >
      <motion.div
        className="w-[500px] p-8"
        initial={{ scale: 0.8, rotate: -10 }}
        animate={{ scale: 1, rotate: 0 }}
        transition={{ duration: 0.5, ease: "easeOut" }}
      >
        <pre className="mb-4">
          {`${ASCII.topLeft}${ASCII.horizontal.repeat(50)}${ASCII.topRight}
${ASCII.vertical}                Send me an email!                 ${ASCII.vertical}
${ASCII.bottomLeft}${ASCII.horizontal.repeat(50)}${ASCII.bottomRight}`}
        </pre>

        <motion.form
          onSubmit={handleSubmit}
          className="space-y-4 pl-5"
          initial="hidden"
          animate="visible"
          variants={{
            hidden: { opacity: 0 },
            visible: {
              opacity: 1,
              transition: {
                staggerChildren: 0.2,
              },
            },
          }}
        >
          {(['name', 'email', 'subject', 'message'] as FormField[]).map((field) => (
            <motion.div
              key={field}
              variants={{
                hidden: { opacity: 0, y: 20 },
                visible: { opacity: 1, y: 0 },
              }}
            >
              {field !== 'message' ? (
                <input
                  type={field === 'email' ? 'email' : 'text'}
                  placeholder={`Your ${field.charAt(0).toUpperCase() + field.slice(1)}`}
                  value={formData[field]}
                  onChange={(e) => setFormData({ ...formData, [field]: e.target.value })}
                  className="w-full bg-transparent border border-white p-2 text-white font-mono"
                  required
                />
              ) : (
                <textarea
                  placeholder="Your Message"
                  value={formData.message}
                  onChange={(e) => setFormData({ ...formData, message: e.target.value })}
                  className="w-full bg-transparent border border-white p-2 text-white font-mono h-32 resize-y max-h-[50vh]"
                  required
                />
              )}
            </motion.div>
          ))}
          <motion.button
            type="submit"
            className="w-full border border-white px-4 py-2 hover:bg-white/10 transition-colors"
            variants={{
              hidden: { opacity: 0, y: 20 },
              visible: { opacity: 1, y: 0 },
            }}
          >
            [Send Message]
          </motion.button>
        </motion.form>

        {status && (
          <div className="mt-4 text-center pl-6">
            {status}
          </div>
        )}
      </motion.div>
      <Water />
    </motion.div>
  );
};

export default EmailPage;

================
File: src/pages/GalleryView.tsx
================
import React, { useState } from 'react';
import { useParams, useNavigate, Navigate, useSearchParams } from 'react-router-dom';
import LightGallery from 'lightgallery/react';
import 'lightgallery/css/lightgallery.css';
import 'lightgallery/css/lg-zoom.css';
import 'lightgallery/css/lg-thumbnail.css';
import lgThumbnail from 'lightgallery/plugins/thumbnail';
import lgZoom from 'lightgallery/plugins/zoom';
import lgVideo from 'lightgallery/plugins/video';
import 'lightgallery/css/lg-video.css';
import { photoGalleries } from '../config/photos';

export const GalleryView = () => {
  const { galleryId, setId } = useParams();
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const [isClosing, setIsClosing] = useState(false);

  const gallery = galleryId ? photoGalleries[galleryId] : undefined;
  const photoSet = gallery?.photoSets.find(set => set.folderId.split('/').pop() === setId);
  const initialPhotoIndex = parseInt(searchParams.get('photoIndex') || '0');

  if (!gallery || !photoSet) {
    return <Navigate to="/404" replace />;
  }

  const handleClose = () => {
    if (!isClosing) {
      setIsClosing(true);
      navigate(`/photos/${galleryId}/${setId}`);
    }
  };

  return !isClosing ? (
    <div className="fixed inset-0 bg-black">
      <div className="relative h-full w-full">
        <div className="relative h-full w-full z-[1000]">
          <LightGallery
            speed={500}
            plugins={[lgThumbnail, lgZoom, lgVideo]}
            mode="lg-fade"
            elementClassNames="gallery-container"
            exThumbImage="data-thumb"
            onInit={(detail) => {
              setTimeout(() => {
                detail.instance.openGallery(initialPhotoIndex);
              }, 100);
            }}
            onBeforeClose={() => {
              setIsClosing(true);
              return true;
            }}
            onAfterClose={handleClose}
            download={true}
            counter={false}
            addClass="custom-gallery"
            controls={true}
          >
            {photoSet.allPhotos.map((photo, index) => (
              <button
                key={index}
                className="gallery-item"
                data-src={photo.type === 'video' ? undefined : photo.imageUrl}
                data-video={photo.type === 'video' ? JSON.stringify({
                  source: [{
                    src: photo.imageUrl,
                    type: 'video/mp4'
                  }],
                  attributes: {
                    preload: false,
                    controls: true,
                    poster: photo.thumbnailUrl
                  }
                }) : undefined}
                data-thumb={photo.thumbnailUrl || photo.imageUrl}
                data-sub-html={`<h4>${photo.title}</h4><p>${photo.description || ''}</p>`}
              >
                {photo.type === 'video' ? (
                  <video className="hidden" poster={photo.thumbnailUrl}>
                    <source src={photo.imageUrl} type="video/mp4" />
                  </video>
                ) : (
                  <img 
                    alt={photo.title} 
                    src={photo.imageUrl} 
                    className="hidden"
                  />
                )}
              </button>
            ))}
          </LightGallery>
        </div>
      </div>

      <style>
        {`
          .custom-gallery {
            position: fixed !important;
            inset: 0 !important;
            z-index: 1500 !important;
          }
          
          .lg-backdrop {
            z-index: 1400 !important;
          }

          .lg-outer {
            z-index: 1500 !important;
          }

          .lg-container {
            position: fixed !important;
            inset: 0 !important;
          }

          .lg-toolbar {
            z-index: 1502 !important;
          }

          .gallery-container {
            position: fixed !important;
            inset: 0 !important;
            z-index: 1500 !important;
            display: flex !important;
            align-items: center !important;
            justify-content: center !important;
          }

          .lg-components {
            pointer-events: auto !important;
            z-index: 1600 !important;
          }

          .lg-sub-html {
            z-index: 1600 !important;
          }

          .lg-counter {
            display: none !important;
          }

          .lg-close {
            /* Remove this commented-out rule to show the close button */
            /* display: none !important; */
          }

          .lg-img-wrap {
            pointer-events: auto !important;
          }

          .lg-outer * {
            pointer-events: auto !important;
          }
        `}
      </style>
    </div>
  ) : null;
};

export default GalleryView;

================
File: src/pages/Home.tsx
================
import { useEffect } from 'react';
import { motion } from 'framer-motion';
import { Water } from '../components/Water/Water';

export const Home = () => {
  useEffect(() => {
    document.body.classList.add('no-scroll');
    return () => {
      document.body.classList.remove('no-scroll');
    };
  }, []);

  return (
    <div className="relative min-h-screen">
      <motion.div 
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="relative h-screen z-20 flex flex-col justify-end"
      >
        <div className="absolute top-2 left-1/2 -translate-x-1/2 z-30">
          <h1 className="text-4xl font-['IBM_Plex_Mono'] font-bold text-white mb-4 text-center">
            Welcome to my website!$!!$!
          </h1>
          <p className="text-gray-300 font-['IBM_Plex_Mono'] text-center">
            ENGAGE with EVERYTHING by me Jamino EXPLORE my stuff
          </p>
        </div>
        <Water />
      </motion.div>
    </div>
  );
};

================
File: src/pages/JamPage.tsx
================
import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Water } from '../components/Water/Water';
import { format, parseISO } from 'date-fns';

interface Playlist {
  name: string;
  embedUrl: string;
}

interface Track {
  name: string;
  artist: string;
  playcount?: number;
  duration?: number;
  lastPlayed?: string;
}

interface Artist {
  name: string;
  playcount: number;
  lastPlayed?: string;
}

interface Album {
  name: string;
  artist: string;
  playcount: number;
  duration?: number;
}

const playlists: Playlist[] = [
  {
    name: "Azymuchi",
    embedUrl: "https://open.spotify.com/embed/playlist/2dANt44pNB4ddzRXVco3PH"
  },
  {
    name: "nuttin etal",
    embedUrl: "https://open.spotify.com/embed/playlist/0KRKiCJXBYDuvRDqpICTPT"
  },
  {
    name: "river music",
    embedUrl: "https://open.spotify.com/embed/playlist/1ypI5Rv2GJ3JSOWD6P8Q6X"
  },
  {
    name: "all the small boats",
    embedUrl: "https://open.spotify.com/embed/playlist/1xreMBZclgEKqcrhxvmipl"
  },
  {
    name: "Wabaldee dabledee",
    embedUrl: "https://open.spotify.com/embed/playlist/6Jpg8sPM8B3ZiubdzEE1EZ"
  }
];

const statsTabs = [
  "Last Played",
  "Top Weekly",
  "Top Monthly",
  "All Time",
  "Top Artists",
  "Top Albums"
] as const;

type StatsTab = typeof statsTabs[number];

const LASTFM_API_KEY = process.env.REACT_APP_LASTFM_API_KEY;
const LASTFM_USERNAME = 'bob10234';

// Updated Spotify icon component with larger size
const SpotifyIcon = () => (
  <svg 
    width="24"  // Increased size further
    height="24" 
    viewBox="0 0 24 24" 
    fill="currentColor"
    className="inline-block mr-0"  // Removed margin completely
  >
    <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.419 1.56-.299.421-1.02.599-1.559.3z"/>
  </svg>
);

export const JamPage = () => {
  const [selectedPlaylist, setSelectedPlaylist] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [selectedStatsTab, setSelectedStatsTab] = useState<StatsTab>("Last Played");
  const [statsData, setStatsData] = useState<Track[] | Artist[] | Album[]>([]);
  const [isStatsLoading, setIsStatsLoading] = useState(true);

  const handlePlaylistChange = (index: number) => {
    setIsLoading(true);
    setSelectedPlaylist(index);
    // Simulate iframe load time
    setTimeout(() => {
      setIsLoading(false);
    }, 500);
  };

  useEffect(() => {
    let isMounted = true;  // Track mounted state

    const fetchStatsData = async () => {
      setIsStatsLoading(true);
      try {
        let method = '';
        let params = '';
        
        switch (selectedStatsTab) {
          case "Last Played":
            method = 'user.getrecenttracks';
            params = '&limit=10';
            break;
          case "Top Weekly":
            method = 'user.gettoptracks';
            params = '&period=7day&limit=10';
            break;
          case "Top Monthly":
            method = 'user.gettoptracks';
            params = '&period=1month&limit=10';
            break;
          case "All Time":
            method = 'user.gettoptracks';
            params = '&period=overall&limit=10';
            break;
          case "Top Artists":
            method = 'user.gettopartists';
            params = '&period=overall&limit=10';
            break;
          case "Top Albums":
            method = 'user.gettopalbums';
            params = '&period=overall&limit=10';
            break;
        }

        const response = await fetch(
          `https://ws.audioscrobbler.com/2.0/?method=${method}&user=${LASTFM_USERNAME}&api_key=${LASTFM_API_KEY}&format=json${params}`
        );
        
        // Check if component is still mounted before proceeding
        if (!isMounted) return;
        
        if (!response.ok) throw new Error('Failed to fetch');
        const data = await response.json();
        
        let transformedData = [];
        
        if (selectedStatsTab === "Top Artists" && isMounted) {
          // Get top artists first
          const artists = data.topartists.artist;
          
          const trackResponse = await fetch(
            `https://ws.audioscrobbler.com/2.0/?method=user.gettoptracks&user=${LASTFM_USERNAME}&api_key=${LASTFM_API_KEY}&format=json&limit=1000`
          );
          
          // Check mounted state again after second API call
          if (!isMounted) return;
          
          const trackData = await trackResponse.json();
          
          // Process each artist
          transformedData = artists.map((artist: any) => {
            // Filter tracks to find the most played one by this artist
            const artistTracks = trackData.toptracks.track.filter(
              (track: any) => track.artist.name.toLowerCase() === artist.name.toLowerCase()
            );
            const topTrack = artistTracks[0]; // First track is the most played
            
            return {
              name: artist.name,
              playcount: artist.playcount,
              topTrack: topTrack ? topTrack.name : 'N/A',
              topTrackPlays: topTrack ? topTrack.playcount : 'N/A'
            };
          });
        } else if (selectedStatsTab === "Last Played") {
          transformedData = data.recenttracks.track.map((track: any) => ({
            name: track.name,
            artist: track.artist['#text'],
            lastPlayed: track.date ? new Date(Number(track.date.uts) * 1000).toISOString() : 'Now Playing'
          }));
        } else if (["Top Weekly", "Top Monthly", "All Time"].includes(selectedStatsTab)) {
          transformedData = data.toptracks.track.map((track: any) => {
            console.log(`Track: ${track.name}, Raw duration: ${track.duration}`);
            const durationNum = Number(track.duration);
            const duration = track.duration && durationNum > 0 
              ? Math.max(1, Math.ceil(durationNum / 60)) // Ensure minimum of 1 minute for any valid duration
              : 'N/A';
            return {
              name: track.name,
              artist: track.artist.name,
              playcount: track.playcount,
              duration
            };
          });
        } else if (selectedStatsTab === "Top Albums") {
          transformedData = data.topalbums.album.map((album: any) => ({
            name: album.name,
            artist: album.artist.name,
            playcount: album.playcount,
            url: album.url
          }));
        }

        if (isMounted) {
          setStatsData(transformedData);
          setIsStatsLoading(false);
        }
      } catch (err) {
        if (isMounted) {
          console.error('Stats fetch error:', err);
          setIsStatsLoading(false);
        }
      }
    };

    fetchStatsData();

    // Cleanup function
    return () => {
      isMounted = false;
    };
  }, [selectedStatsTab]);

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="min-h-screen w-full p-8"
    >
      <div className="max-w-7xl mx-auto space-y-6">
        {/* Profile and Playlist Cards Container */}
        <div className="flex gap-6" style={{ marginLeft: '12%', marginRight: '20%' }}>
          {/* Profile Card */}
          <motion.div 
            initial={{ x: -50, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            className="bg-black/90 border border-white rounded-lg w-40"
          >
            {/* Title Bar */}
            <div className="border-b border-white px-4 py-2">
              <span className="text-white font-mono">My Profile</span>
            </div>
            {/* Content */}
            <div className="p-4">
              <div className="flex flex-col items-center space-y-4">
                <img 
                  src="/assets/pfp.png" 
                  alt="Profile" 
                  className="w-24 h-24 rounded-full"
                />
                <h2 className="text-white font-mono text-xl">Jam</h2>
                <a 
                  href="https://open.spotify.com/user/bob10234?si=394e0893e56d47e3"
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-white hover:text-blue-400 transition-colors font-mono text-center flex items-center ml-2"
                >
                  <SpotifyIcon />
                  <span>Open on Spotify</span>
                </a>
              </div>
            </div>
          </motion.div>

          {/* Playlist Card */}
          <motion.div 
            initial={{ x: 50, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            className="bg-black/90 border border-white rounded-lg flex-1"
          >
            {/* Title Bar */}
            <div className="border-b border-white px-4 py-2">
              <span className="text-white font-mono">Best Playlists Of All Time</span>
            </div>
            {/* Content */}
            <div className="p-4">
              {/* Updated Playlist Selector with sliding animation */}
              <div className="flex flex-wrap mb-4 border border-white rounded-lg overflow-hidden relative">
                {playlists.map((playlist, index) => (
                  <button
                    key={index}
                    onClick={() => handlePlaylistChange(index)}
                    className={`relative flex-1 min-w-[120px] py-2 px-4 font-mono text-sm transition-colors ${
                      selectedPlaylist === index 
                        ? 'text-black' 
                        : 'text-white hover:bg-white/10'
                    }`}
                  >
                    {selectedPlaylist === index && (
                      <motion.div
                        layoutId="activePlaylist"
                        className="absolute inset-0 bg-white"
                        initial={false}
                        transition={{
                          type: "spring",
                          stiffness: 500,
                          damping: 30
                        }}
                      />
                    )}
                    <span className="relative z-10">{playlist.name}</span>
                  </button>
                ))}
              </div>

              {/* Playlist Content with Loading State */}
              <AnimatePresence mode="wait">
                {isLoading ? (
                  <motion.div
                    key="loading"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    className="rounded-xl bg-white/10 h-[152px] animate-pulse"
                  />
                ) : (
                  <motion.div
                    key={selectedPlaylist}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -20 }}
                    transition={{ duration: 0.3 }}
                  >
                    <iframe
                      title={`${playlists[selectedPlaylist].name} Spotify Playlist`}
                      src={`${playlists[selectedPlaylist].embedUrl}?utm_source=generator`}
                      width="100%"
                      height="152"
                      frameBorder="0"
                      allowFullScreen
                      allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
                      loading="lazy"
                      className="rounded-xl"
                    />
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          </motion.div>
        </div>

        {/* New Stats Card */}
        <motion.div 
          initial={{ y: 50, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          className="bg-black/90 border border-white rounded-lg mx-auto"
          style={{ marginLeft: '12%', marginRight: '20%' }}
        >
          {/* Title Bar */}
          <div className="border-b border-white px-4 py-2">
            <span className="text-white font-mono">Spotify Stats</span>
          </div>
          
          {/* Content */}
          <div className="p-4">
            {/* Stats Tab Selector */}
            <div className="flex flex-wrap mb-4 border border-white rounded-lg overflow-hidden relative">
              {statsTabs.map((tab) => (
                <button
                  key={tab}
                  onClick={() => setSelectedStatsTab(tab)}
                  className={`relative flex-1 min-w-[120px] py-2 px-4 font-mono text-sm transition-colors ${
                    selectedStatsTab === tab 
                      ? 'text-black' 
                      : 'text-white hover:bg-white/10'
                  }`}
                >
                  {selectedStatsTab === tab && (
                    <motion.div
                      layoutId="activeStatsTab"
                      className="absolute inset-0 bg-white"
                      initial={false}
                      transition={{
                        type: "spring",
                        stiffness: 500,
                        damping: 30
                      }}
                    />
                  )}
                  <span className="relative z-10">{tab}</span>
                </button>
              ))}
            </div>

            {/* Stats Content */}
            <AnimatePresence mode="wait">
              {isStatsLoading ? (
                <motion.div
                  key="loading"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                  className="h-[380px] bg-white/10 animate-pulse rounded-lg"
                />
              ) : (
                <motion.div
                  key={selectedStatsTab}
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                  className="overflow-y-auto max-h-[380px]"
                >
                  <table className="w-full text-white font-mono">
                    <thead>
                      <tr className="border-b border-white/20">
                        <th className="py-2 px-4 text-left">#</th>
                        {selectedStatsTab === "Top Artists" ? (
                          <>
                            <th className="py-2 px-4 text-left">Artist</th>
                            <th className="py-2 px-4 text-left">Most Played Track</th>
                            <th className="py-2 px-4 text-right">Track Plays</th>
                            <th className="py-2 px-4 text-right">Total Plays</th>
                          </>
                        ) : selectedStatsTab === "Top Albums" ? (
                          <>
                            <th className="py-2 px-4 text-left">Album</th>
                            <th className="py-2 px-4 text-left">Artist</th>
                            <th className="py-2 px-4 text-right">Plays</th>
                          </>
                        ) : (
                          <>
                            <th className="py-2 px-4 text-left">Track</th>
                            <th className="py-2 px-4 text-left">Artist</th>
                            {selectedStatsTab === "Last Played" ? (
                              <th className="py-2 px-4 text-right">Played</th>
                            ) : (
                              <>
                                <th className="py-2 px-4 text-right">Plays</th>
                                <th className="py-2 px-4 text-right">Duration</th>
                              </>
                            )}
                          </>
                        )}
                      </tr>
                    </thead>
                    <tbody>
                      {statsData.map((item: any, index) => (
                        <tr key={index} className="border-b border-white/10">
                          <td className="py-2 px-4">{index + 1}</td>
                          {selectedStatsTab === "Top Artists" ? (
                            <>
                              <td className="py-2 px-4">{item.name}</td>
                              <td className="py-2 px-4">{item.topTrack}</td>
                              <td className="py-2 px-4 text-right">{item.topTrackPlays}</td>
                              <td className="py-2 px-4 text-right">{item.playcount}</td>
                            </>
                          ) : selectedStatsTab === "Top Albums" ? (
                            <>
                              <td className="py-2 px-4">{item.name}</td>
                              <td className="py-2 px-4">{item.artist}</td>
                              <td className="py-2 px-4 text-right">{item.playcount}</td>
                            </>
                          ) : (
                            <>
                              <td className="py-2 px-4">{item.name}</td>
                              <td className="py-2 px-4">{item.artist}</td>
                              {selectedStatsTab === "Last Played" ? (
                                <td className="py-2 px-4 text-right">
                                  {item.lastPlayed === 'Now Playing' || !item.lastPlayed
                                    ? 'Now Playing'
                                    : format(parseISO(item.lastPlayed), 'MMM d, h:mm a')}
                                </td>
                              ) : (
                                <>
                                  <td className="py-2 px-4 text-right">{item.playcount}</td>
                                  <td className="py-2 px-4 text-right">
                                    {typeof item.duration === 'number' ? `${item.duration} min` : item.duration}
                                  </td>
                                </>
                              )}
                            </>
                          )}
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </motion.div>
              )}
            </AnimatePresence>
          </div>
        </motion.div>
      </div>
      <Water />
    </motion.div>
  );
};

export default JamPage;

================
File: src/pages/ModPage.tsx
================
import React, { useEffect, useState } from 'react';
import { useParams, Navigate } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import ReactMarkdown from 'react-markdown';
import { useReadme } from '../hooks/useReadme';
import { mods } from '../config/mods';

const ASCII = {
  topLeft: '┌',
  topRight: '┐',
  bottomLeft: '└',
  bottomRight: '┘',
  horizontal: '─',
  vertical: '│',
  teeRight: '├',
  teeLeft: '┤',
  teeDown: '┬',
  teeUp: '┴',
  cross: '┼'
};

export const ModPage = () => {
  const { modId } = useParams();
  const [isExiting, setIsExiting] = useState(false);
  
  // Handle scroll after exit animation completes
  const handleExitComplete = () => {
    window.scrollTo(0, 0);
    setIsExiting(false);
  };

  // Trigger exit animation when modId changes
  useEffect(() => {
    setIsExiting(true);
  }, [modId]);

  const mod = modId ? mods[modId] : undefined;
  const { readme, isLoading, error } = useReadme(mod?.readmeUrl ?? '');
  const boxRef = React.useRef<HTMLDivElement>(null);

  if (!mod) {
    return <Navigate to="/404" replace />;
  }

  const wrapText = (text: string, maxWidth: number) => {
    const words = text.split(' ');
    const lines: string[] = [];
    let currentLine = '';

    words.forEach(word => {
      if ((currentLine + ' ' + word).length <= maxWidth) {
        currentLine = currentLine ? `${currentLine} ${word}` : word;
      } else {
        lines.push(currentLine);
        currentLine = word;
      }
    });
    if (currentLine) {
      lines.push(currentLine);
    }
    return lines;
  };

  const drawBox = (contents: { label: string; content: string }[]) => {
    const maxWidth = 60; // Fixed width for consistent appearance
    const processedContents: string[] = [];
    
    contents.forEach(({ label, content }) => {
      const labelWidth = label.length;
      const contentWidth = maxWidth - labelWidth;
      const wrappedContent = wrapText(content, contentWidth);
      
      processedContents.push(`${label}${wrappedContent[0]}`);
      wrappedContent.slice(1).forEach(line => {
        processedContents.push(`${' '.repeat(labelWidth)}${line}`);
      });
    });

    const contentWidth = maxWidth + 4;
    
    const drawLine = (start: string, middle: string, end: string) => {
      return `${start}${middle.repeat(contentWidth)}${end}`;
    };

    const drawContentLine = (content: string) => {
      return `${ASCII.vertical} ${content.padEnd(contentWidth - 2)} ${ASCII.vertical}`;
    };

    return [
      drawLine(ASCII.topLeft, ASCII.horizontal, ASCII.topRight),
      ...processedContents.map((content, index) => [
        drawContentLine(content),
        // Only add separator line between different fields, not between wrapped lines
        index < processedContents.length - 1 && 
        !processedContents[index + 1].startsWith(' ') ? 
          drawLine(ASCII.teeRight, ASCII.horizontal, ASCII.teeLeft) : null
      ]).flat().filter(Boolean),
      drawLine(ASCII.bottomLeft, ASCII.horizontal, ASCII.bottomRight)
    ].join('\n');
  };

  return (
    <AnimatePresence mode="wait" onExitComplete={handleExitComplete}>
      <motion.div 
        key={modId}
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0 }}
        transition={{ 
          duration: 0.3,
          exit: { duration: 0.2 } // Faster exit for smoother transition
        }}
        className="relative min-h-screen w-full overflow-y-auto font-mono"
      >
        <div 
          className="mx-auto px-4 pb-32 pt-16 relative"
          style={{ 
            marginLeft: '25%',
            marginRight: '20%',
            maxWidth: '900px'
          }}
        >
          {/* Terminal Window for Mod Info */}
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
            className="mb-8 text-white bg-black/90 border border-white rounded-lg"
          >
            <div className="bg-white/10 px-2 py-1 border-b border-white rounded-t-lg">
              <span>mod-info</span>
            </div>
            
            <div className="p-4">
              <div className="mb-4 overflow-x-auto">
                <div className="flex gap-8 items-start">
                  <div className="whitespace-pre" ref={boxRef}>
                    {drawBox([
                      { label: 'MOD: ', content: mod.title },
                      { label: 'DESC: ', content: mod.description }
                    ])}
                  </div>
                  <img 
                    src={mod.iconUrl} 
                    alt={`${mod.title} icon`}
                    className="object-contain border border-white rounded-lg mt-4 ml-14"
                    style={{
                      height: boxRef.current ? `${boxRef.current.clientHeight * 0.9}px` : 'auto',
                      width: boxRef.current ? `${boxRef.current.clientHeight * 0.9}px` : 'auto',
                    }}
                  />
                </div>
              </div>

              <div className="overflow-x-auto">
                <div className="flex gap-3 text-black min-w-fit">
                  {[
                    { url: mod.githubUrl, label: "Github" },
                    { url: mod.modrinthUrl, label: "Modrinth" },
                    { url: mod.curseforgeUrl, label: "CurseForge" }
                  ].map(link => (
                    <a
                      key={link.label}
                      href={link.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="px-3 py-1 bg-white hover:bg-gray-200 transition-colors"
                    >
                      [{link.label}]
                    </a>
                  ))}
                </div>
              </div>
            </div>
          </motion.div>

          {/* README Terminal Window */}
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
            className="text-white bg-black/90 border border-white rounded-lg"
          >
            <div className="bg-white/10 px-2 py-1 border-b border-white rounded-t-lg">
              <span>readme.md</span>
            </div>
            
            <div className="p-4">
              <AnimatePresence mode="wait">
                {isLoading ? (
                  <motion.div
                    key="loading"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    className="flex justify-center items-center h-32"
                  >
                    <div className="animate-pulse">LOADING...</div>
                  </motion.div>
                ) : error ? (
                  <motion.div
                    key="error"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    className="text-red-400 p-4"
                  >
                    ERROR: {error}
                  </motion.div>
                ) : (
                  <motion.div
                    key="content"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                  >
                    <ReactMarkdown 
                      className="prose prose-invert max-w-none"
                      components={{
                        img: ({node, ...props}) => (
                          <img 
                            {...props} 
                            className="max-w-full h-auto border border-white" 
                            loading="lazy"
                          />
                        ),
                        a: ({node, ...props}) => (
                          <a 
                            {...props} 
                            className="text-white hover:text-gray-300 underline" 
                            target="_blank" 
                            rel="noopener noreferrer" 
                          >
                            {props.children}
                          </a>
                        ),
                        h1: ({node, ...props}) => (
                          <h1 {...props} className="text-2xl font-bold mt-8 mb-4 first:mt-0 border-b border-white">
                            {props.children}
                          </h1>
                        ),
                        h2: ({node, ...props}) => (
                          <h2 {...props} className="text-xl font-bold mt-6 mb-3 border-b border-white">
                            {props.children}
                          </h2>
                        ),
                        p: ({node, ...props}) => (
                          <p {...props} className="mb-4" />
                        ),
                        ul: ({node, ...props}) => (
                          <ul {...props} className="list-none mb-4 space-y-1">
                            {React.Children.map(props.children, child => {
                              if (React.isValidElement(child)) {
                                return <li>{`${ASCII.teeRight} ${child.props.children}`}</li>
                              }
                              return null;
                            })}
                          </ul>
                        ),
                        ol: ({node, ...props}) => (
                          <ol {...props} className="list-none mb-4 space-y-1">
                            {React.Children.map(props.children, (child, index) => {
                              if (React.isValidElement(child)) {
                                return <li>{`[${index + 1}] ${child.props.children}`}</li>
                              }
                              return null;
                            })}
                          </ol>
                        ),
                        code: ({node, inline, ...props}) => (
                          inline ? 
                            <code {...props} className="bg-white/10 px-1" /> :
                            <code {...props} className="block bg-white/10 p-4 overflow-x-auto" />
                        ),
                        strong: ({node, ...props}) => (
                          <strong {...props} className="text-gray-300 font-bold" />
                        ),
                        em: ({node, ...props}) => (
                          <em {...props} className="text-gray-200 italic" />
                        )
                      }}
                    >
                      {readme}
                    </ReactMarkdown>
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          </motion.div>
        </div>
      </motion.div>
    </AnimatePresence>
  );
};

export default ModPage;

================
File: src/pages/NotFound.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { Water } from '../components/Water/Water';

const NotFound = () => {
  // Force the document to have no scroll since we want a fixed view
  React.useEffect(() => {
    document.body.classList.add('no-scroll');
    return () => {
      document.body.classList.remove('no-scroll');
    };
  }, []);

  return (
    <div className="relative min-h-screen">
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="min-h-screen flex flex-col items-center justify-center text-white font-mono"
      >
        <div className="flex flex-col items-center space-y-8">
          <img
            src="/assets/404.jpg"
            alt="404 illustration"
            className="w-64 h-64 object-contain"
          />
          <div className="text-center space-y-2">
            <h1 className="text-4xl font-bold">404</h1>
            <p className="text-xl">"I died" - Car</p>
          </div>
        </div>
        <Water />
      </motion.div>
    </div>
  );
};

export default NotFound;

================
File: src/pages/PhotosPage.tsx
================
import React, { useState, useMemo, useRef, useEffect } from 'react';
import { useParams, Navigate, useNavigate } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { photoGalleries, PhotoItem } from '../config/photos';

interface FolderData {
  folderId: string;
  photos: PhotoItem[];
}

const ASCII = {
  topLeft: '┌',
  topRight: '┐',
  bottomLeft: '└',
  bottomRight: '┘',
  horizontal: '─',
  vertical: '│',
  teeRight: '├',
  teeLeft: '┤'
};

const PhotoSet = ({ 
  photos,
  title,
  description,
  setIndex,
  folderData
}: { 
  photos: PhotoItem[]; 
  title: string; 
  description: string;
  setIndex: number;
  folderData: FolderData;
}) => {
  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);
  const [isHoveringAnyPhoto, setIsHoveringAnyPhoto] = useState(false);
  const navigate = useNavigate();
  const { galleryId } = useParams();
  const [isVisible, setIsVisible] = useState(false);
  const photoSetRef = useRef(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true);
          observer.disconnect(); // Stop observing once visible
        }
      },
      {
        threshold: 0.1 // Trigger when 10% of the element is visible
      }
    );

    if (photoSetRef.current) {
      observer.observe(photoSetRef.current);
    }

    return () => observer.disconnect();
  }, []);

  const getRandomOffset = () => {
    return Math.random() > 0.8 ? (Math.random() * 40 - 20) + 'px' : '0px';
  };

  const getRandomSize = (baseSize: number) => {
    return Math.random() > 0.8 ? baseSize + (Math.random() * 60 - 30) : baseSize;
  };

  const positions = useMemo(() => [
    {
      wrapperStyle: {
        left: `calc(35% + ${getRandomOffset()})`,
        top: `calc(15% + ${getRandomOffset()})`,
        transform: 'rotate(-12deg)',
        width: `${getRandomSize(400)}px`,
        position: 'absolute' as const,
        zIndex: 2,
      },
    },
    {
      wrapperStyle: {
        right: `calc(10% + ${getRandomOffset()})`,
        top: `calc(25% + ${getRandomOffset()})`,
        transform: 'rotate(6deg)',
        width: `${getRandomSize(500)}px`,
        position: 'absolute' as const,
        zIndex: 3,
      },
    },
    {
      wrapperStyle: {
        left: `calc(28% + ${getRandomOffset()})`,
        bottom: `calc(20% + ${getRandomOffset()})`,
        transform: 'rotate(-8deg)',
        width: `${getRandomSize(450)}px`,
        position: 'absolute' as const,
        zIndex: 1,
      },
    },
    {
      wrapperStyle: {
        right: `calc(15% + ${getRandomOffset()})`,
        bottom: `calc(15% + ${getRandomOffset()})`,
        transform: 'rotate(4deg)',
        width: `${getRandomSize(380)}px`,
        position: 'absolute' as const,
        zIndex: 4,
      },
    },
  ], []);

  const getZIndex = (index: number) => {
    return hoveredIndex === index ? 50 : positions[index].wrapperStyle.zIndex;
  };

  const handleClick = (clickedPhotoIndex: number) => {
    const setId = folderData.folderId.split('/').pop();
    navigate(`/photos/${galleryId}/${setId}/gallery?photoIndex=${clickedPhotoIndex}`);
  };

  const drawBox = (title: string, content: (string | undefined)[], isCenter: boolean = false) => {
    const validContent = content.filter((item): item is string => !!item);
    
    const maxWidth = isCenter ? 80 : 40;
    
    return (
      <div className="text-white font-mono whitespace-pre-wrap break-words max-w-full overflow-hidden">
        {title && (
          <div className="mb-2">
            {`${ASCII.topLeft}${ASCII.horizontal.repeat(Math.min(title.length + 2, maxWidth))}${ASCII.topRight}`}
            {`\n${ASCII.vertical} ${title.slice(0, maxWidth - 2)} ${ASCII.vertical}\n`}
            {`${ASCII.bottomLeft}${ASCII.horizontal.repeat(Math.min(title.length + 2, maxWidth))}${ASCII.bottomRight}`}
          </div>
        )}
        {validContent.map((text, index) => (
          <div key={index} className="opacity-80" style={{ maxWidth: `${maxWidth}ch` }}>
            {text}
          </div>
        ))}
      </div>
    );
  };

  const textOffset = useMemo(() => ({
    left: getRandomOffset(),
    top: getRandomOffset()
  }), []);

  return (
    <div 
      ref={photoSetRef}
      id={`photo-set-${setIndex}`} 
      className="relative h-screen overflow-hidden" 
      style={{ marginLeft: '250px' }}
    >
      <AnimatePresence>
        {isVisible && (
          <>
            <div 
              className="text-white text-center py-4 opacity-70 absolute top-4 left-0 right-0 z-10"
              style={{ 
                transform: `translate(${textOffset.left}, calc(${textOffset.top} + 1rem))`
              }}
            >
              Click any photo to view the full gallery
            </div>
            
            <motion.div 
              initial={{ opacity: 0 }}
              animate={{ opacity: isHoveringAnyPhoto ? 0 : 1 }}
              exit={{ opacity: 0 }}
              transition={{ delay: 0.2 }}
              className="absolute left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2 z-10"
            >
              <div className="text-white bg-black/90 border border-white max-w-xl">
                <div className="bg-white/10 px-3 py-1.5 border-b border-white">
                  <span className="text-lg">{title}</span>
                </div>
                <div className="p-4 max-w-full">
                  {drawBox('', [description], true)}
                </div>
              </div>
            </motion.div>

            {photos.map((photo, index) => (
              <motion.div
                key={index}
                style={{
                  ...positions[index].wrapperStyle,
                  zIndex: getZIndex(index),
                  transition: 'z-index 0ms'
                }}
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.8 }}
                transition={{ delay: index * 0.2 }}
                onMouseEnter={() => {
                  setHoveredIndex(index);
                  setIsHoveringAnyPhoto(true);
                }}
                onMouseLeave={() => {
                  setHoveredIndex(null);
                  setIsHoveringAnyPhoto(false);
                }}
              >
                <motion.div
                  className="group cursor-pointer"
                  whileHover={{ 
                    scale: 1.05,
                    rotate: 0,
                    transition: { duration: 0.3 }
                  }}
                  onClick={() => handleClick(index)}
                >
                  <div className="relative">
                    <img
                      src={photo.imageUrl}
                      alt={photo.title}
                      className="object-cover border-4 border-white shadow-2xl"
                      style={{ height: '300px', width: '100%' }}
                    />
                    <motion.div 
                      className="absolute inset-0 bg-gradient-to-b from-black/0 to-black/50
                             opacity-0 group-hover:opacity-100 transition-opacity duration-300"
                    />
                  </div>
                  
                  <motion.div 
                    className="absolute -bottom-20 left-0 right-0 opacity-0 
                           group-hover:opacity-100 transition-opacity duration-300
                           bg-black/80 p-2 border border-white max-w-full overflow-hidden"
                    style={{ width: positions[index].wrapperStyle.width }}
                  >
                    {drawBox(photo.title, [photo.description], false)}
                  </motion.div>
                </motion.div>
              </motion.div>
            ))}
          </>
        )}
      </AnimatePresence>
    </div>
  );
};

export const PhotosPage = () => {
  const { galleryId, setId } = useParams();
  const [isExiting, setIsExiting] = useState(false);
  const gallery = galleryId ? photoGalleries[galleryId] : undefined;

  // Handle scroll after exit animation completes
  const handleExitComplete = () => {
    window.scrollTo(0, 0);
    setIsExiting(false);
  };

  // Trigger exit animation when galleryId changes
  useEffect(() => {
    setIsExiting(true);
  }, [galleryId]);

  // Existing setId scroll behavior
  useEffect(() => {
    if (setId) {
      const setIndex = gallery?.photoSets.findIndex(set => 
        set.folderId.split('/').pop() === setId
      );
      
      if (setIndex !== undefined && setIndex !== -1) {
        setTimeout(() => {
          const element = document.getElementById(`photo-set-${setIndex}`);
          element?.scrollIntoView({ behavior: 'smooth' });
        }, 100);
      }
    }
  }, [setId, gallery]);

  if (!gallery) {
    return <Navigate to="/404" replace />;
  }

  return (
    <div 
      className="relative min-h-screen w-full overflow-y-auto font-mono"
    >
      <AnimatePresence mode="wait" onExitComplete={handleExitComplete}>
        <motion.div
          key={galleryId}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0 }}
          transition={{ 
            duration: 0.3,
            exit: { duration: 0.2 }
          }}
        >
          {gallery.photoSets.map((set, index) => (
            <React.Fragment key={index}>
              <PhotoSet
                setIndex={index}
                title={set.title}
                description={set.description}
                photos={set.photos}
                folderData={{ folderId: set.folderId, photos: set.allPhotos }}
              />
              {index < gallery.photoSets.length - 1 && (
                <motion.div 
                  className="w-full text-center py-8 text-white -mt-20 cursor-pointer relative z-20"
                  whileHover={{ y: [0, -8, 0] }}
                  transition={{ 
                    repeat: Infinity,
                    duration: 1.5
                  }}
                  onClick={() => {
                    const nextSet = document.getElementById(`photo-set-${index + 1}`);
                    nextSet?.scrollIntoView({ behavior: 'smooth' });
                  }}
                >
                  ↓ Click here for more photos ↓
                </motion.div>
              )}
            </React.Fragment>
          ))}
        </motion.div>
      </AnimatePresence>
    </div>
  );
};

export default PhotosPage;

================
File: src/pages/TransitDatabase.tsx
================
import { motion } from 'framer-motion';
import { Water } from '../components/Water/Water';

export const TransitDatabase = () => {
  return (
    <motion.div 
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="h-screen flex items-center justify-center"
    >
      <h1 
        style={{ fontFamily: 'Times New Roman' }}
        className="text-4xl text-white"
      >
        Coming soon :)
      </h1>
      <Water />
    </motion.div>
  );
};

export default TransitDatabase;

================
File: src/react-app-env.d.ts
================
/// <reference types="react-scripts" />

================
File: src/reportWebVitals.ts
================
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: src/setupTests.ts
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: tailwind.config.js
================
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
    "./public/index.html"
  ],
  theme: {
    extend: {},
  },
  plugins: [
    require('@tailwindcss/typography'),
  ],
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}
